
seg_led_sw.elf:     file format elf32-littlenios2
seg_led_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000dc8 memsz 0x00000dc8 flags r-x
    LOAD off    0x00001de8 vaddr 0x00001de8 paddr 0x00001ed8 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001fc8 vaddr 0x00001fc8 paddr 0x00001fc8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001ed8  2**0
                  CONTENTS
  2 .text         00000da8  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000020  00001dc8  00001dc8  00001dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00001de8  00001ed8  00001de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00001fc8  00001fc8  00001fc8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001fd8  00001fd8  00001ed8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002e8  00000000  00000000  00001f00  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003837  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001415  00000000  00000000  00005a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001864  00000000  00000000  00006e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003e0  00000000  00000000  00008698  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001080  00000000  00000000  00008a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001579  00000000  00000000  00009af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000b074  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000230  00000000  00000000  0000b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000c3b2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000c3b5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c3c1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c3c2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000c3c3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000c3ce  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000c3d9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0000c3e4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000005c  00000000  00000000  0000c3ed  2**0
                  CONTENTS, READONLY
 26 .jdi          0000501c  00000000  00000000  0000c449  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00045d9a  00000000  00000000  00011465  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001dc8 l    d  .rodata	00000000 .rodata
00001de8 l    d  .rwdata	00000000 .rwdata
00001fc8 l    d  .bss	00000000 .bss
00001fd8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../seg_led_sw_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 seg_led_sw.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001460 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00001de8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00001c48 g     F .text	0000002c alt_main
00001ed8 g       *ABS*	00000000 __flash_rwdata_start
00001414 g     F .text	0000004c printf
00001dc0 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001fc8 g     O .bss	00000004 errno
00001fd0 g     O .bss	00000004 alt_argv
00009ec8 g       *ABS*	00000000 _gp
00001c74 g     F .text	00000004 usleep
000013b0 g     F .text	00000028 memcpy
000013d8 g     F .text	0000003c _printf_r
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000012f4 g     F .text	00000064 .hidden __udivsi3
00001ec8 g     O .rwdata	00000004 _global_impure_ptr
00001fd8 g       *ABS*	00000000 __bss_end
00001db8 g     F .text	00000004 alt_dcache_flush_all
00001ed8 g       *ABS*	00000000 __ram_rwdata_end
00001c78 g     F .text	00000060 write
00001de8 g       *ABS*	00000000 __ram_rodata_end
00001ed0 g     O .rwdata	00000004 jtag_uart_0
00001358 g     F .text	00000058 .hidden __umodsi3
00001fd8 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001cfc g     F .text	00000034 altera_avalon_jtag_uart_write
000014cc g     F .text	0000052c ___vfprintf_internal_r
00001020 g     F .text	0000003c _start
00001cf8 g     F .text	00000004 alt_sys_init
00001b40 g     F .text	00000028 .hidden __mulsi3
00001de8 g       *ABS*	00000000 __ram_rwdata_start
00001dc8 g       *ABS*	00000000 __ram_rodata_start
00001d30 g     F .text	00000088 alt_busy_sleep
00001fd8 g       *ABS*	00000000 __alt_stack_base
00001a14 g     F .text	000000b8 __sfvwrite_small_dev
00001fc8 g       *ABS*	00000000 __bss_start
0000105c g     F .text	000001a0 main
00001fcc g     O .bss	00000004 alt_envp
00001ed4 g     O .rwdata	00000004 alt_errno
000011fc g     F .text	00000084 .hidden __divsi3
00001dc8 g       *ABS*	00000000 __flash_rodata_start
00001cd8 g     F .text	00000020 alt_irq_init
00001ae8 g     F .text	00000058 _write_r
00001ecc g     O .rwdata	00000004 _impure_ptr
00001fd4 g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001ed8 g       *ABS*	00000000 _edata
00001fd8 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00001280 g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001acc g     F .text	0000001c strlen
00001dbc g     F .text	00000004 alt_icache_flush_all
000019f8 g     F .text	0000001c __vfprintf_internal
00001b68 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a7b214 	ori	gp,gp,40648
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1087f214 	ori	r2,r2,8136

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c7f614 	ori	r3,r3,8152

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff717c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	0001b680 	call	1b68 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	0001c480 	call	1c48 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7190>

0000105c <main>:

#define read(base) IORD_ALTERA_AVALON_PIO_DATA(base)
#define write(base, data) IOWR_ALTERA_AVALON_PIO_DATA(base, data)

int main()
{ 
    105c:	defff204 	addi	sp,sp,-56
   SEG_BASE [7:0]
   SW_BASE
   */
  //alt_putstr("Starting.\n");

  char seg_decode[16] = {
    1060:	01400034 	movhi	r5,0
    1064:	01800404 	movi	r6,16
    1068:	29477604 	addi	r5,r5,7640
    106c:	d809883a 	mov	r4,sp

#define read(base) IORD_ALTERA_AVALON_PIO_DATA(base)
#define write(base, data) IOWR_ALTERA_AVALON_PIO_DATA(base, data)

int main()
{ 
    1070:	dfc00d15 	stw	ra,52(sp)
    1074:	df000c15 	stw	fp,48(sp)
    1078:	ddc00b15 	stw	r23,44(sp)
    107c:	dd800a15 	stw	r22,40(sp)
    1080:	dd400915 	stw	r21,36(sp)
    1084:	dd000815 	stw	r20,32(sp)
    1088:	dcc00715 	stw	r19,28(sp)
    108c:	dc800615 	stw	r18,24(sp)
    1090:	dc400515 	stw	r17,20(sp)
    1094:	dc000415 	stw	r16,16(sp)
   SEG_BASE [7:0]
   SW_BASE
   */
  //alt_putstr("Starting.\n");

  char seg_decode[16] = {
    1098:	00013b00 	call	13b0 <memcpy>
	 0x79,
	 0x71
  };

  char dp = 0;
  write( SEG_EN_BASE, 0x7 );
    109c:	008c1804 	movi	r2,12384
    10a0:	00c001c4 	movi	r3,7
    10a4:	10c00035 	stwio	r3,0(r2)
  write( SEG_BASE, ( ~seg_decode[0] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
    10a8:	008c1404 	movi	r2,12368
    10ac:	00c03004 	movi	r3,192
    10b0:	10c00035 	stwio	r3,0(r2)
  /* Event loop never exits. */
  unsigned int count = 0;
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
  char state = 0;
    10b4:	0005883a 	mov	r2,zero

  /* Event loop never exits. */
  unsigned int count = 0;
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
    10b8:	0025883a 	mov	r18,zero
  write( SEG_BASE, ( ~seg_decode[0] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );

  /* Event loop never exits. */
  unsigned int count = 0;
  char dig_0 = 0;
  char dig_1 = 0;
    10bc:	0027883a 	mov	r19,zero
  write( SEG_EN_BASE, 0x7 );
  write( SEG_BASE, ( ~seg_decode[0] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );

  /* Event loop never exits. */
  unsigned int count = 0;
  char dig_0 = 0;
    10c0:	0029883a 	mov	r20,zero
  char dp = 0;
  write( SEG_EN_BASE, 0x7 );
  write( SEG_BASE, ( ~seg_decode[0] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );

  /* Event loop never exits. */
  unsigned int count = 0;
    10c4:	0021883a 	mov	r16,zero
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
  char state = 0;
  while (1){
	  char sw = read( SW_BASE );
    10c8:	058c1004 	movi	r22,12352
		  printf ( "Digit 1: %d\n", dig_1 );
		  //printf ( "Digit 2: %c\n", dig_2 );
	  }
	  state = sw;

	  write( SEG_EN_BASE, 0x4 );
    10cc:	05400104 	movi	r21,4
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
  char state = 0;
  while (1){
	  char sw = read( SW_BASE );
    10d0:	b4400037 	ldwio	r17,0(r22)
	  if ( sw != state && sw == 0 ){
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	88c03fcc 	andi	r3,r17,255
    10dc:	1080201c 	xori	r2,r2,128
    10e0:	18c0201c 	xori	r3,r3,128
    10e4:	10bfe004 	addi	r2,r2,-128
    10e8:	18ffe004 	addi	r3,r3,-128
    10ec:	10c01926 	beq	r2,r3,1154 <main+0xf8>
    10f0:	1800181e 	bne	r3,zero,1154 <main+0xf8>
		  //alt_putstr("Switched pressed.\n");
		  //printf("Switched pressed.\n");

		  ++count;
    10f4:	84000044 	addi	r16,r16,1
		  dp = 0;
		  dig_0 = ( count % 10 );
    10f8:	01400284 	movi	r5,10
    10fc:	8009883a 	mov	r4,r16
    1100:	00013580 	call	1358 <__umodsi3>
		  dig_1 = ( ( count % 100 ) / 10 );
    1104:	01401904 	movi	r5,100
    1108:	8009883a 	mov	r4,r16
		  //alt_putstr("Switched pressed.\n");
		  //printf("Switched pressed.\n");

		  ++count;
		  dp = 0;
		  dig_0 = ( count % 10 );
    110c:	1029883a 	mov	r20,r2
		  dig_1 = ( ( count % 100 ) / 10 );
    1110:	00013580 	call	1358 <__umodsi3>
    1114:	01400284 	movi	r5,10
    1118:	1009883a 	mov	r4,r2
    111c:	00012f40 	call	12f4 <__udivsi3>
		  dig_2 = ( ( count % 1000 ) / 100 );
    1120:	0140fa04 	movi	r5,1000
    1124:	8009883a 	mov	r4,r16
		  //printf("Switched pressed.\n");

		  ++count;
		  dp = 0;
		  dig_0 = ( count % 10 );
		  dig_1 = ( ( count % 100 ) / 10 );
    1128:	102f883a 	mov	r23,r2
    112c:	1027883a 	mov	r19,r2
		  dig_2 = ( ( count % 1000 ) / 100 );
    1130:	00013580 	call	1358 <__umodsi3>
    1134:	01401904 	movi	r5,100
    1138:	1009883a 	mov	r4,r2
    113c:	00012f40 	call	12f4 <__udivsi3>

		  //alt_putstr( "Count: " ); alt_putchar( (char)(dig_0+48) ); alt_putstr( "\n" );
		  printf ( "Digit 1: %d\n", dig_1 );
    1140:	01000034 	movhi	r4,0
    1144:	b80b883a 	mov	r5,r23
    1148:	21077204 	addi	r4,r4,7624

		  ++count;
		  dp = 0;
		  dig_0 = ( count % 10 );
		  dig_1 = ( ( count % 100 ) / 10 );
		  dig_2 = ( ( count % 1000 ) / 100 );
    114c:	1025883a 	mov	r18,r2

		  //alt_putstr( "Count: " ); alt_putchar( (char)(dig_0+48) ); alt_putstr( "\n" );
		  printf ( "Digit 1: %d\n", dig_1 );
    1150:	00014140 	call	1414 <printf>
		  //printf ( "Digit 2: %c\n", dig_2 );
	  }
	  state = sw;

	  write( SEG_EN_BASE, 0x4 );
    1154:	070c1804 	movi	fp,12384
    1158:	e5400035 	stwio	r21,0(fp)
	  write( SEG_BASE, ( ~seg_decode[ dig_0 ] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
    115c:	a0803fcc 	andi	r2,r20,255
    1160:	1080201c 	xori	r2,r2,128
    1164:	10bfe004 	addi	r2,r2,-128
    1168:	d885883a 	add	r2,sp,r2
    116c:	10800007 	ldb	r2,0(r2)
    1170:	05cc1404 	movi	r23,12368
    1174:	0084303a 	nor	r2,zero,r2
    1178:	10801fcc 	andi	r2,r2,127
    117c:	10802014 	ori	r2,r2,128
    1180:	b8800035 	stwio	r2,0(r23)
	  usleep( 100 );
    1184:	01001904 	movi	r4,100
    1188:	0001c740 	call	1c74 <usleep>

	  write( SEG_EN_BASE, 0x2 );
    118c:	00800084 	movi	r2,2
    1190:	e0800035 	stwio	r2,0(fp)
	  write( SEG_BASE, ( ~seg_decode[ dig_1 ] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
    1194:	98803fcc 	andi	r2,r19,255
    1198:	1080201c 	xori	r2,r2,128
    119c:	10bfe004 	addi	r2,r2,-128
    11a0:	d885883a 	add	r2,sp,r2
    11a4:	10800007 	ldb	r2,0(r2)
    11a8:	0084303a 	nor	r2,zero,r2
    11ac:	10801fcc 	andi	r2,r2,127
    11b0:	10802014 	ori	r2,r2,128
    11b4:	b8800035 	stwio	r2,0(r23)
	  usleep( 100 );
    11b8:	01001904 	movi	r4,100
    11bc:	0001c740 	call	1c74 <usleep>

	  write( SEG_EN_BASE, 0x1 );
    11c0:	00800044 	movi	r2,1
    11c4:	e0800035 	stwio	r2,0(fp)
	  write( SEG_BASE, ( ~seg_decode[ dig_2 ] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
    11c8:	90803fcc 	andi	r2,r18,255
    11cc:	1080201c 	xori	r2,r2,128
    11d0:	10bfe004 	addi	r2,r2,-128
    11d4:	d885883a 	add	r2,sp,r2
    11d8:	10800007 	ldb	r2,0(r2)
    11dc:	0084303a 	nor	r2,zero,r2
    11e0:	10801fcc 	andi	r2,r2,127
    11e4:	10802014 	ori	r2,r2,128
    11e8:	b8800035 	stwio	r2,0(r23)
	  usleep( 100 );
    11ec:	01001904 	movi	r4,100
    11f0:	0001c740 	call	1c74 <usleep>
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
  char state = 0;
  while (1){
	  char sw = read( SW_BASE );
    11f4:	8805883a 	mov	r2,r17
	  usleep( 100 );

	  write( SEG_EN_BASE, 0x1 );
	  write( SEG_BASE, ( ~seg_decode[ dig_2 ] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
	  usleep( 100 );
  }
    11f8:	003fb506 	br	10d0 <_gp+0xffff7208>

000011fc <__divsi3>:
    11fc:	20001b16 	blt	r4,zero,126c <__divsi3+0x70>
    1200:	000f883a 	mov	r7,zero
    1204:	28001616 	blt	r5,zero,1260 <__divsi3+0x64>
    1208:	200d883a 	mov	r6,r4
    120c:	29001a2e 	bgeu	r5,r4,1278 <__divsi3+0x7c>
    1210:	00800804 	movi	r2,32
    1214:	00c00044 	movi	r3,1
    1218:	00000106 	br	1220 <__divsi3+0x24>
    121c:	10000d26 	beq	r2,zero,1254 <__divsi3+0x58>
    1220:	294b883a 	add	r5,r5,r5
    1224:	10bfffc4 	addi	r2,r2,-1
    1228:	18c7883a 	add	r3,r3,r3
    122c:	293ffb36 	bltu	r5,r4,121c <_gp+0xffff7354>
    1230:	0005883a 	mov	r2,zero
    1234:	18000726 	beq	r3,zero,1254 <__divsi3+0x58>
    1238:	0005883a 	mov	r2,zero
    123c:	31400236 	bltu	r6,r5,1248 <__divsi3+0x4c>
    1240:	314dc83a 	sub	r6,r6,r5
    1244:	10c4b03a 	or	r2,r2,r3
    1248:	1806d07a 	srli	r3,r3,1
    124c:	280ad07a 	srli	r5,r5,1
    1250:	183ffa1e 	bne	r3,zero,123c <_gp+0xffff7374>
    1254:	38000126 	beq	r7,zero,125c <__divsi3+0x60>
    1258:	0085c83a 	sub	r2,zero,r2
    125c:	f800283a 	ret
    1260:	014bc83a 	sub	r5,zero,r5
    1264:	39c0005c 	xori	r7,r7,1
    1268:	003fe706 	br	1208 <_gp+0xffff7340>
    126c:	0109c83a 	sub	r4,zero,r4
    1270:	01c00044 	movi	r7,1
    1274:	003fe306 	br	1204 <_gp+0xffff733c>
    1278:	00c00044 	movi	r3,1
    127c:	003fee06 	br	1238 <_gp+0xffff7370>

00001280 <__modsi3>:
    1280:	20001716 	blt	r4,zero,12e0 <__modsi3+0x60>
    1284:	000f883a 	mov	r7,zero
    1288:	2005883a 	mov	r2,r4
    128c:	28001216 	blt	r5,zero,12d8 <__modsi3+0x58>
    1290:	2900162e 	bgeu	r5,r4,12ec <__modsi3+0x6c>
    1294:	01800804 	movi	r6,32
    1298:	00c00044 	movi	r3,1
    129c:	00000106 	br	12a4 <__modsi3+0x24>
    12a0:	30000a26 	beq	r6,zero,12cc <__modsi3+0x4c>
    12a4:	294b883a 	add	r5,r5,r5
    12a8:	31bfffc4 	addi	r6,r6,-1
    12ac:	18c7883a 	add	r3,r3,r3
    12b0:	293ffb36 	bltu	r5,r4,12a0 <_gp+0xffff73d8>
    12b4:	18000526 	beq	r3,zero,12cc <__modsi3+0x4c>
    12b8:	1806d07a 	srli	r3,r3,1
    12bc:	11400136 	bltu	r2,r5,12c4 <__modsi3+0x44>
    12c0:	1145c83a 	sub	r2,r2,r5
    12c4:	280ad07a 	srli	r5,r5,1
    12c8:	183ffb1e 	bne	r3,zero,12b8 <_gp+0xffff73f0>
    12cc:	38000126 	beq	r7,zero,12d4 <__modsi3+0x54>
    12d0:	0085c83a 	sub	r2,zero,r2
    12d4:	f800283a 	ret
    12d8:	014bc83a 	sub	r5,zero,r5
    12dc:	003fec06 	br	1290 <_gp+0xffff73c8>
    12e0:	0109c83a 	sub	r4,zero,r4
    12e4:	01c00044 	movi	r7,1
    12e8:	003fe706 	br	1288 <_gp+0xffff73c0>
    12ec:	00c00044 	movi	r3,1
    12f0:	003ff106 	br	12b8 <_gp+0xffff73f0>

000012f4 <__udivsi3>:
    12f4:	200d883a 	mov	r6,r4
    12f8:	2900152e 	bgeu	r5,r4,1350 <__udivsi3+0x5c>
    12fc:	28001416 	blt	r5,zero,1350 <__udivsi3+0x5c>
    1300:	00800804 	movi	r2,32
    1304:	00c00044 	movi	r3,1
    1308:	00000206 	br	1314 <__udivsi3+0x20>
    130c:	10000e26 	beq	r2,zero,1348 <__udivsi3+0x54>
    1310:	28000516 	blt	r5,zero,1328 <__udivsi3+0x34>
    1314:	294b883a 	add	r5,r5,r5
    1318:	10bfffc4 	addi	r2,r2,-1
    131c:	18c7883a 	add	r3,r3,r3
    1320:	293ffa36 	bltu	r5,r4,130c <_gp+0xffff7444>
    1324:	18000826 	beq	r3,zero,1348 <__udivsi3+0x54>
    1328:	0005883a 	mov	r2,zero
    132c:	31400236 	bltu	r6,r5,1338 <__udivsi3+0x44>
    1330:	314dc83a 	sub	r6,r6,r5
    1334:	10c4b03a 	or	r2,r2,r3
    1338:	1806d07a 	srli	r3,r3,1
    133c:	280ad07a 	srli	r5,r5,1
    1340:	183ffa1e 	bne	r3,zero,132c <_gp+0xffff7464>
    1344:	f800283a 	ret
    1348:	0005883a 	mov	r2,zero
    134c:	f800283a 	ret
    1350:	00c00044 	movi	r3,1
    1354:	003ff406 	br	1328 <_gp+0xffff7460>

00001358 <__umodsi3>:
    1358:	2005883a 	mov	r2,r4
    135c:	2900122e 	bgeu	r5,r4,13a8 <__umodsi3+0x50>
    1360:	28001116 	blt	r5,zero,13a8 <__umodsi3+0x50>
    1364:	01800804 	movi	r6,32
    1368:	00c00044 	movi	r3,1
    136c:	00000206 	br	1378 <__umodsi3+0x20>
    1370:	30000c26 	beq	r6,zero,13a4 <__umodsi3+0x4c>
    1374:	28000516 	blt	r5,zero,138c <__umodsi3+0x34>
    1378:	294b883a 	add	r5,r5,r5
    137c:	31bfffc4 	addi	r6,r6,-1
    1380:	18c7883a 	add	r3,r3,r3
    1384:	293ffa36 	bltu	r5,r4,1370 <_gp+0xffff74a8>
    1388:	18000626 	beq	r3,zero,13a4 <__umodsi3+0x4c>
    138c:	1806d07a 	srli	r3,r3,1
    1390:	11400136 	bltu	r2,r5,1398 <__umodsi3+0x40>
    1394:	1145c83a 	sub	r2,r2,r5
    1398:	280ad07a 	srli	r5,r5,1
    139c:	183ffb1e 	bne	r3,zero,138c <_gp+0xffff74c4>
    13a0:	f800283a 	ret
    13a4:	f800283a 	ret
    13a8:	00c00044 	movi	r3,1
    13ac:	003ff706 	br	138c <_gp+0xffff74c4>

000013b0 <memcpy>:
    13b0:	2005883a 	mov	r2,r4
    13b4:	2007883a 	mov	r3,r4
    13b8:	218d883a 	add	r6,r4,r6
    13bc:	19800526 	beq	r3,r6,13d4 <memcpy+0x24>
    13c0:	29000003 	ldbu	r4,0(r5)
    13c4:	18c00044 	addi	r3,r3,1
    13c8:	29400044 	addi	r5,r5,1
    13cc:	193fffc5 	stb	r4,-1(r3)
    13d0:	003ffa06 	br	13bc <_gp+0xffff74f4>
    13d4:	f800283a 	ret

000013d8 <_printf_r>:
    13d8:	defffd04 	addi	sp,sp,-12
    13dc:	dfc00015 	stw	ra,0(sp)
    13e0:	d9800115 	stw	r6,4(sp)
    13e4:	d9c00215 	stw	r7,8(sp)
    13e8:	20c00217 	ldw	r3,8(r4)
    13ec:	01800034 	movhi	r6,0
    13f0:	31868504 	addi	r6,r6,6676
    13f4:	19800115 	stw	r6,4(r3)
    13f8:	280d883a 	mov	r6,r5
    13fc:	21400217 	ldw	r5,8(r4)
    1400:	d9c00104 	addi	r7,sp,4
    1404:	00014cc0 	call	14cc <___vfprintf_internal_r>
    1408:	dfc00017 	ldw	ra,0(sp)
    140c:	dec00304 	addi	sp,sp,12
    1410:	f800283a 	ret

00001414 <printf>:
    1414:	defffc04 	addi	sp,sp,-16
    1418:	dfc00015 	stw	ra,0(sp)
    141c:	d9400115 	stw	r5,4(sp)
    1420:	d9800215 	stw	r6,8(sp)
    1424:	d9c00315 	stw	r7,12(sp)
    1428:	00800034 	movhi	r2,0
    142c:	1087b304 	addi	r2,r2,7884
    1430:	10800017 	ldw	r2,0(r2)
    1434:	01400034 	movhi	r5,0
    1438:	29468504 	addi	r5,r5,6676
    143c:	10c00217 	ldw	r3,8(r2)
    1440:	d9800104 	addi	r6,sp,4
    1444:	19400115 	stw	r5,4(r3)
    1448:	200b883a 	mov	r5,r4
    144c:	11000217 	ldw	r4,8(r2)
    1450:	00019f80 	call	19f8 <__vfprintf_internal>
    1454:	dfc00017 	ldw	ra,0(sp)
    1458:	dec00404 	addi	sp,sp,16
    145c:	f800283a 	ret

00001460 <print_repeat>:
    1460:	defffb04 	addi	sp,sp,-20
    1464:	dc800315 	stw	r18,12(sp)
    1468:	dc400215 	stw	r17,8(sp)
    146c:	dc000115 	stw	r16,4(sp)
    1470:	dfc00415 	stw	ra,16(sp)
    1474:	2025883a 	mov	r18,r4
    1478:	2823883a 	mov	r17,r5
    147c:	d9800005 	stb	r6,0(sp)
    1480:	3821883a 	mov	r16,r7
    1484:	04000a0e 	bge	zero,r16,14b0 <print_repeat+0x50>
    1488:	88800117 	ldw	r2,4(r17)
    148c:	01c00044 	movi	r7,1
    1490:	d80d883a 	mov	r6,sp
    1494:	880b883a 	mov	r5,r17
    1498:	9009883a 	mov	r4,r18
    149c:	103ee83a 	callr	r2
    14a0:	843fffc4 	addi	r16,r16,-1
    14a4:	103ff726 	beq	r2,zero,1484 <_gp+0xffff75bc>
    14a8:	00bfffc4 	movi	r2,-1
    14ac:	00000106 	br	14b4 <print_repeat+0x54>
    14b0:	0005883a 	mov	r2,zero
    14b4:	dfc00417 	ldw	ra,16(sp)
    14b8:	dc800317 	ldw	r18,12(sp)
    14bc:	dc400217 	ldw	r17,8(sp)
    14c0:	dc000117 	ldw	r16,4(sp)
    14c4:	dec00504 	addi	sp,sp,20
    14c8:	f800283a 	ret

000014cc <___vfprintf_internal_r>:
    14cc:	deffe504 	addi	sp,sp,-108
    14d0:	d8c00804 	addi	r3,sp,32
    14d4:	ddc01815 	stw	r23,96(sp)
    14d8:	dd801715 	stw	r22,92(sp)
    14dc:	dd401615 	stw	r21,88(sp)
    14e0:	dd001515 	stw	r20,84(sp)
    14e4:	dcc01415 	stw	r19,80(sp)
    14e8:	dc801315 	stw	r18,76(sp)
    14ec:	dc401215 	stw	r17,72(sp)
    14f0:	dc001115 	stw	r16,68(sp)
    14f4:	dfc01a15 	stw	ra,104(sp)
    14f8:	df001915 	stw	fp,100(sp)
    14fc:	2029883a 	mov	r20,r4
    1500:	2823883a 	mov	r17,r5
    1504:	382d883a 	mov	r22,r7
    1508:	d9800f15 	stw	r6,60(sp)
    150c:	0021883a 	mov	r16,zero
    1510:	d8000e15 	stw	zero,56(sp)
    1514:	d8000a15 	stw	zero,40(sp)
    1518:	002b883a 	mov	r21,zero
    151c:	0027883a 	mov	r19,zero
    1520:	0025883a 	mov	r18,zero
    1524:	d8000c15 	stw	zero,48(sp)
    1528:	d8000b15 	stw	zero,44(sp)
    152c:	002f883a 	mov	r23,zero
    1530:	d8c00915 	stw	r3,36(sp)
    1534:	d8c00f17 	ldw	r3,60(sp)
    1538:	19000003 	ldbu	r4,0(r3)
    153c:	20803fcc 	andi	r2,r4,255
    1540:	1080201c 	xori	r2,r2,128
    1544:	10bfe004 	addi	r2,r2,-128
    1548:	10011e26 	beq	r2,zero,19c4 <___vfprintf_internal_r+0x4f8>
    154c:	00c00044 	movi	r3,1
    1550:	b8c01426 	beq	r23,r3,15a4 <___vfprintf_internal_r+0xd8>
    1554:	1dc00216 	blt	r3,r23,1560 <___vfprintf_internal_r+0x94>
    1558:	b8000626 	beq	r23,zero,1574 <___vfprintf_internal_r+0xa8>
    155c:	00011506 	br	19b4 <___vfprintf_internal_r+0x4e8>
    1560:	01400084 	movi	r5,2
    1564:	b9401d26 	beq	r23,r5,15dc <___vfprintf_internal_r+0x110>
    1568:	014000c4 	movi	r5,3
    156c:	b9402b26 	beq	r23,r5,161c <___vfprintf_internal_r+0x150>
    1570:	00011006 	br	19b4 <___vfprintf_internal_r+0x4e8>
    1574:	01400944 	movi	r5,37
    1578:	1140fc26 	beq	r2,r5,196c <___vfprintf_internal_r+0x4a0>
    157c:	88800117 	ldw	r2,4(r17)
    1580:	d9000005 	stb	r4,0(sp)
    1584:	01c00044 	movi	r7,1
    1588:	d80d883a 	mov	r6,sp
    158c:	880b883a 	mov	r5,r17
    1590:	a009883a 	mov	r4,r20
    1594:	103ee83a 	callr	r2
    1598:	1000d81e 	bne	r2,zero,18fc <___vfprintf_internal_r+0x430>
    159c:	84000044 	addi	r16,r16,1
    15a0:	00010406 	br	19b4 <___vfprintf_internal_r+0x4e8>
    15a4:	01400c04 	movi	r5,48
    15a8:	1140fa26 	beq	r2,r5,1994 <___vfprintf_internal_r+0x4c8>
    15ac:	01400944 	movi	r5,37
    15b0:	11400a1e 	bne	r2,r5,15dc <___vfprintf_internal_r+0x110>
    15b4:	d8800005 	stb	r2,0(sp)
    15b8:	88800117 	ldw	r2,4(r17)
    15bc:	b80f883a 	mov	r7,r23
    15c0:	d80d883a 	mov	r6,sp
    15c4:	880b883a 	mov	r5,r17
    15c8:	a009883a 	mov	r4,r20
    15cc:	103ee83a 	callr	r2
    15d0:	1000ca1e 	bne	r2,zero,18fc <___vfprintf_internal_r+0x430>
    15d4:	84000044 	addi	r16,r16,1
    15d8:	0000f506 	br	19b0 <___vfprintf_internal_r+0x4e4>
    15dc:	25fff404 	addi	r23,r4,-48
    15e0:	bdc03fcc 	andi	r23,r23,255
    15e4:	00c00244 	movi	r3,9
    15e8:	1dc00936 	bltu	r3,r23,1610 <___vfprintf_internal_r+0x144>
    15ec:	00bfffc4 	movi	r2,-1
    15f0:	90800426 	beq	r18,r2,1604 <___vfprintf_internal_r+0x138>
    15f4:	01400284 	movi	r5,10
    15f8:	9009883a 	mov	r4,r18
    15fc:	0001b400 	call	1b40 <__mulsi3>
    1600:	00000106 	br	1608 <___vfprintf_internal_r+0x13c>
    1604:	0005883a 	mov	r2,zero
    1608:	b8a5883a 	add	r18,r23,r2
    160c:	0000e206 	br	1998 <___vfprintf_internal_r+0x4cc>
    1610:	01400b84 	movi	r5,46
    1614:	1140e426 	beq	r2,r5,19a8 <___vfprintf_internal_r+0x4dc>
    1618:	05c00084 	movi	r23,2
    161c:	213ff404 	addi	r4,r4,-48
    1620:	27003fcc 	andi	fp,r4,255
    1624:	00c00244 	movi	r3,9
    1628:	1f000936 	bltu	r3,fp,1650 <___vfprintf_internal_r+0x184>
    162c:	00bfffc4 	movi	r2,-1
    1630:	98800426 	beq	r19,r2,1644 <___vfprintf_internal_r+0x178>
    1634:	01400284 	movi	r5,10
    1638:	9809883a 	mov	r4,r19
    163c:	0001b400 	call	1b40 <__mulsi3>
    1640:	00000106 	br	1648 <___vfprintf_internal_r+0x17c>
    1644:	0005883a 	mov	r2,zero
    1648:	e0a7883a 	add	r19,fp,r2
    164c:	0000d906 	br	19b4 <___vfprintf_internal_r+0x4e8>
    1650:	00c01b04 	movi	r3,108
    1654:	10c0d226 	beq	r2,r3,19a0 <___vfprintf_internal_r+0x4d4>
    1658:	013fffc4 	movi	r4,-1
    165c:	99000226 	beq	r19,r4,1668 <___vfprintf_internal_r+0x19c>
    1660:	d8000b15 	stw	zero,44(sp)
    1664:	00000106 	br	166c <___vfprintf_internal_r+0x1a0>
    1668:	04c00044 	movi	r19,1
    166c:	01001a44 	movi	r4,105
    1670:	11001626 	beq	r2,r4,16cc <___vfprintf_internal_r+0x200>
    1674:	20800916 	blt	r4,r2,169c <___vfprintf_internal_r+0x1d0>
    1678:	010018c4 	movi	r4,99
    167c:	11008826 	beq	r2,r4,18a0 <___vfprintf_internal_r+0x3d4>
    1680:	01001904 	movi	r4,100
    1684:	11001126 	beq	r2,r4,16cc <___vfprintf_internal_r+0x200>
    1688:	01001604 	movi	r4,88
    168c:	1100c81e 	bne	r2,r4,19b0 <___vfprintf_internal_r+0x4e4>
    1690:	00c00044 	movi	r3,1
    1694:	d8c00e15 	stw	r3,56(sp)
    1698:	00001506 	br	16f0 <___vfprintf_internal_r+0x224>
    169c:	01001cc4 	movi	r4,115
    16a0:	11009826 	beq	r2,r4,1904 <___vfprintf_internal_r+0x438>
    16a4:	20800416 	blt	r4,r2,16b8 <___vfprintf_internal_r+0x1ec>
    16a8:	01001bc4 	movi	r4,111
    16ac:	1100c01e 	bne	r2,r4,19b0 <___vfprintf_internal_r+0x4e4>
    16b0:	05400204 	movi	r21,8
    16b4:	00000f06 	br	16f4 <___vfprintf_internal_r+0x228>
    16b8:	01001d44 	movi	r4,117
    16bc:	11000d26 	beq	r2,r4,16f4 <___vfprintf_internal_r+0x228>
    16c0:	01001e04 	movi	r4,120
    16c4:	11000a26 	beq	r2,r4,16f0 <___vfprintf_internal_r+0x224>
    16c8:	0000b906 	br	19b0 <___vfprintf_internal_r+0x4e4>
    16cc:	d8c00a17 	ldw	r3,40(sp)
    16d0:	b7000104 	addi	fp,r22,4
    16d4:	18000726 	beq	r3,zero,16f4 <___vfprintf_internal_r+0x228>
    16d8:	df000d15 	stw	fp,52(sp)
    16dc:	b5c00017 	ldw	r23,0(r22)
    16e0:	b800080e 	bge	r23,zero,1704 <___vfprintf_internal_r+0x238>
    16e4:	05efc83a 	sub	r23,zero,r23
    16e8:	02400044 	movi	r9,1
    16ec:	00000606 	br	1708 <___vfprintf_internal_r+0x23c>
    16f0:	05400404 	movi	r21,16
    16f4:	b0c00104 	addi	r3,r22,4
    16f8:	d8c00d15 	stw	r3,52(sp)
    16fc:	b5c00017 	ldw	r23,0(r22)
    1700:	d8000a15 	stw	zero,40(sp)
    1704:	0013883a 	mov	r9,zero
    1708:	d839883a 	mov	fp,sp
    170c:	b8001726 	beq	r23,zero,176c <___vfprintf_internal_r+0x2a0>
    1710:	a80b883a 	mov	r5,r21
    1714:	b809883a 	mov	r4,r23
    1718:	da401015 	stw	r9,64(sp)
    171c:	00012f40 	call	12f4 <__udivsi3>
    1720:	a80b883a 	mov	r5,r21
    1724:	1009883a 	mov	r4,r2
    1728:	102d883a 	mov	r22,r2
    172c:	0001b400 	call	1b40 <__mulsi3>
    1730:	b885c83a 	sub	r2,r23,r2
    1734:	00c00244 	movi	r3,9
    1738:	da401017 	ldw	r9,64(sp)
    173c:	18800216 	blt	r3,r2,1748 <___vfprintf_internal_r+0x27c>
    1740:	10800c04 	addi	r2,r2,48
    1744:	00000506 	br	175c <___vfprintf_internal_r+0x290>
    1748:	d8c00e17 	ldw	r3,56(sp)
    174c:	18000226 	beq	r3,zero,1758 <___vfprintf_internal_r+0x28c>
    1750:	10800dc4 	addi	r2,r2,55
    1754:	00000106 	br	175c <___vfprintf_internal_r+0x290>
    1758:	108015c4 	addi	r2,r2,87
    175c:	e0800005 	stb	r2,0(fp)
    1760:	b02f883a 	mov	r23,r22
    1764:	e7000044 	addi	fp,fp,1
    1768:	003fe806 	br	170c <_gp+0xffff7844>
    176c:	e6efc83a 	sub	r23,fp,sp
    1770:	9dc5c83a 	sub	r2,r19,r23
    1774:	0080090e 	bge	zero,r2,179c <___vfprintf_internal_r+0x2d0>
    1778:	e085883a 	add	r2,fp,r2
    177c:	01400c04 	movi	r5,48
    1780:	d8c00917 	ldw	r3,36(sp)
    1784:	e009883a 	mov	r4,fp
    1788:	e0c0032e 	bgeu	fp,r3,1798 <___vfprintf_internal_r+0x2cc>
    178c:	e7000044 	addi	fp,fp,1
    1790:	21400005 	stb	r5,0(r4)
    1794:	e0bffa1e 	bne	fp,r2,1780 <_gp+0xffff78b8>
    1798:	e6efc83a 	sub	r23,fp,sp
    179c:	d8c00b17 	ldw	r3,44(sp)
    17a0:	4dd1883a 	add	r8,r9,r23
    17a4:	922dc83a 	sub	r22,r18,r8
    17a8:	18001626 	beq	r3,zero,1804 <___vfprintf_internal_r+0x338>
    17ac:	48000a26 	beq	r9,zero,17d8 <___vfprintf_internal_r+0x30c>
    17b0:	00800b44 	movi	r2,45
    17b4:	d8800805 	stb	r2,32(sp)
    17b8:	88800117 	ldw	r2,4(r17)
    17bc:	01c00044 	movi	r7,1
    17c0:	d9800804 	addi	r6,sp,32
    17c4:	880b883a 	mov	r5,r17
    17c8:	a009883a 	mov	r4,r20
    17cc:	103ee83a 	callr	r2
    17d0:	10004a1e 	bne	r2,zero,18fc <___vfprintf_internal_r+0x430>
    17d4:	84000044 	addi	r16,r16,1
    17d8:	0580070e 	bge	zero,r22,17f8 <___vfprintf_internal_r+0x32c>
    17dc:	b00f883a 	mov	r7,r22
    17e0:	01800c04 	movi	r6,48
    17e4:	880b883a 	mov	r5,r17
    17e8:	a009883a 	mov	r4,r20
    17ec:	00014600 	call	1460 <print_repeat>
    17f0:	1000421e 	bne	r2,zero,18fc <___vfprintf_internal_r+0x430>
    17f4:	85a1883a 	add	r16,r16,r22
    17f8:	e02d883a 	mov	r22,fp
    17fc:	bf2fc83a 	sub	r23,r23,fp
    1800:	00002006 	br	1884 <___vfprintf_internal_r+0x3b8>
    1804:	0580090e 	bge	zero,r22,182c <___vfprintf_internal_r+0x360>
    1808:	b00f883a 	mov	r7,r22
    180c:	01800804 	movi	r6,32
    1810:	880b883a 	mov	r5,r17
    1814:	a009883a 	mov	r4,r20
    1818:	da401015 	stw	r9,64(sp)
    181c:	00014600 	call	1460 <print_repeat>
    1820:	da401017 	ldw	r9,64(sp)
    1824:	1000351e 	bne	r2,zero,18fc <___vfprintf_internal_r+0x430>
    1828:	85a1883a 	add	r16,r16,r22
    182c:	483ff226 	beq	r9,zero,17f8 <_gp+0xffff7930>
    1830:	00800b44 	movi	r2,45
    1834:	d8800805 	stb	r2,32(sp)
    1838:	88800117 	ldw	r2,4(r17)
    183c:	01c00044 	movi	r7,1
    1840:	d9800804 	addi	r6,sp,32
    1844:	880b883a 	mov	r5,r17
    1848:	a009883a 	mov	r4,r20
    184c:	103ee83a 	callr	r2
    1850:	10002a1e 	bne	r2,zero,18fc <___vfprintf_internal_r+0x430>
    1854:	84000044 	addi	r16,r16,1
    1858:	003fe706 	br	17f8 <_gp+0xffff7930>
    185c:	b5bfffc4 	addi	r22,r22,-1
    1860:	b0800003 	ldbu	r2,0(r22)
    1864:	01c00044 	movi	r7,1
    1868:	d9800804 	addi	r6,sp,32
    186c:	d8800805 	stb	r2,32(sp)
    1870:	88800117 	ldw	r2,4(r17)
    1874:	880b883a 	mov	r5,r17
    1878:	a009883a 	mov	r4,r20
    187c:	103ee83a 	callr	r2
    1880:	10001e1e 	bne	r2,zero,18fc <___vfprintf_internal_r+0x430>
    1884:	8585c83a 	sub	r2,r16,r22
    1888:	b5c9883a 	add	r4,r22,r23
    188c:	e085883a 	add	r2,fp,r2
    1890:	013ff216 	blt	zero,r4,185c <_gp+0xffff7994>
    1894:	1021883a 	mov	r16,r2
    1898:	dd800d17 	ldw	r22,52(sp)
    189c:	00004406 	br	19b0 <___vfprintf_internal_r+0x4e4>
    18a0:	00800044 	movi	r2,1
    18a4:	1480080e 	bge	r2,r18,18c8 <___vfprintf_internal_r+0x3fc>
    18a8:	95ffffc4 	addi	r23,r18,-1
    18ac:	b80f883a 	mov	r7,r23
    18b0:	01800804 	movi	r6,32
    18b4:	880b883a 	mov	r5,r17
    18b8:	a009883a 	mov	r4,r20
    18bc:	00014600 	call	1460 <print_repeat>
    18c0:	10000e1e 	bne	r2,zero,18fc <___vfprintf_internal_r+0x430>
    18c4:	85e1883a 	add	r16,r16,r23
    18c8:	b0800017 	ldw	r2,0(r22)
    18cc:	01c00044 	movi	r7,1
    18d0:	d80d883a 	mov	r6,sp
    18d4:	d8800005 	stb	r2,0(sp)
    18d8:	88800117 	ldw	r2,4(r17)
    18dc:	880b883a 	mov	r5,r17
    18e0:	a009883a 	mov	r4,r20
    18e4:	b5c00104 	addi	r23,r22,4
    18e8:	103ee83a 	callr	r2
    18ec:	1000031e 	bne	r2,zero,18fc <___vfprintf_internal_r+0x430>
    18f0:	84000044 	addi	r16,r16,1
    18f4:	b82d883a 	mov	r22,r23
    18f8:	00002d06 	br	19b0 <___vfprintf_internal_r+0x4e4>
    18fc:	00bfffc4 	movi	r2,-1
    1900:	00003106 	br	19c8 <___vfprintf_internal_r+0x4fc>
    1904:	b5c00017 	ldw	r23,0(r22)
    1908:	b7000104 	addi	fp,r22,4
    190c:	b809883a 	mov	r4,r23
    1910:	0001acc0 	call	1acc <strlen>
    1914:	9091c83a 	sub	r8,r18,r2
    1918:	102d883a 	mov	r22,r2
    191c:	0200090e 	bge	zero,r8,1944 <___vfprintf_internal_r+0x478>
    1920:	400f883a 	mov	r7,r8
    1924:	01800804 	movi	r6,32
    1928:	880b883a 	mov	r5,r17
    192c:	a009883a 	mov	r4,r20
    1930:	da001015 	stw	r8,64(sp)
    1934:	00014600 	call	1460 <print_repeat>
    1938:	da001017 	ldw	r8,64(sp)
    193c:	103fef1e 	bne	r2,zero,18fc <_gp+0xffff7a34>
    1940:	8221883a 	add	r16,r16,r8
    1944:	88800117 	ldw	r2,4(r17)
    1948:	b00f883a 	mov	r7,r22
    194c:	b80d883a 	mov	r6,r23
    1950:	880b883a 	mov	r5,r17
    1954:	a009883a 	mov	r4,r20
    1958:	103ee83a 	callr	r2
    195c:	103fe71e 	bne	r2,zero,18fc <_gp+0xffff7a34>
    1960:	85a1883a 	add	r16,r16,r22
    1964:	e02d883a 	mov	r22,fp
    1968:	00001106 	br	19b0 <___vfprintf_internal_r+0x4e4>
    196c:	00c00044 	movi	r3,1
    1970:	04ffffc4 	movi	r19,-1
    1974:	d8000e15 	stw	zero,56(sp)
    1978:	d8c00a15 	stw	r3,40(sp)
    197c:	05400284 	movi	r21,10
    1980:	9825883a 	mov	r18,r19
    1984:	d8000c15 	stw	zero,48(sp)
    1988:	d8000b15 	stw	zero,44(sp)
    198c:	182f883a 	mov	r23,r3
    1990:	00000806 	br	19b4 <___vfprintf_internal_r+0x4e8>
    1994:	ddc00b15 	stw	r23,44(sp)
    1998:	05c00084 	movi	r23,2
    199c:	00000506 	br	19b4 <___vfprintf_internal_r+0x4e8>
    19a0:	00c00044 	movi	r3,1
    19a4:	d8c00c15 	stw	r3,48(sp)
    19a8:	05c000c4 	movi	r23,3
    19ac:	00000106 	br	19b4 <___vfprintf_internal_r+0x4e8>
    19b0:	002f883a 	mov	r23,zero
    19b4:	d8c00f17 	ldw	r3,60(sp)
    19b8:	18c00044 	addi	r3,r3,1
    19bc:	d8c00f15 	stw	r3,60(sp)
    19c0:	003edc06 	br	1534 <_gp+0xffff766c>
    19c4:	8005883a 	mov	r2,r16
    19c8:	dfc01a17 	ldw	ra,104(sp)
    19cc:	df001917 	ldw	fp,100(sp)
    19d0:	ddc01817 	ldw	r23,96(sp)
    19d4:	dd801717 	ldw	r22,92(sp)
    19d8:	dd401617 	ldw	r21,88(sp)
    19dc:	dd001517 	ldw	r20,84(sp)
    19e0:	dcc01417 	ldw	r19,80(sp)
    19e4:	dc801317 	ldw	r18,76(sp)
    19e8:	dc401217 	ldw	r17,72(sp)
    19ec:	dc001117 	ldw	r16,68(sp)
    19f0:	dec01b04 	addi	sp,sp,108
    19f4:	f800283a 	ret

000019f8 <__vfprintf_internal>:
    19f8:	00800034 	movhi	r2,0
    19fc:	1087b304 	addi	r2,r2,7884
    1a00:	300f883a 	mov	r7,r6
    1a04:	280d883a 	mov	r6,r5
    1a08:	200b883a 	mov	r5,r4
    1a0c:	11000017 	ldw	r4,0(r2)
    1a10:	00014cc1 	jmpi	14cc <___vfprintf_internal_r>

00001a14 <__sfvwrite_small_dev>:
    1a14:	2880000b 	ldhu	r2,0(r5)
    1a18:	1080020c 	andi	r2,r2,8
    1a1c:	10002126 	beq	r2,zero,1aa4 <__sfvwrite_small_dev+0x90>
    1a20:	2880008f 	ldh	r2,2(r5)
    1a24:	defffa04 	addi	sp,sp,-24
    1a28:	dc000015 	stw	r16,0(sp)
    1a2c:	dfc00515 	stw	ra,20(sp)
    1a30:	dd000415 	stw	r20,16(sp)
    1a34:	dcc00315 	stw	r19,12(sp)
    1a38:	dc800215 	stw	r18,8(sp)
    1a3c:	dc400115 	stw	r17,4(sp)
    1a40:	2821883a 	mov	r16,r5
    1a44:	10001216 	blt	r2,zero,1a90 <__sfvwrite_small_dev+0x7c>
    1a48:	2027883a 	mov	r19,r4
    1a4c:	3025883a 	mov	r18,r6
    1a50:	3823883a 	mov	r17,r7
    1a54:	05010004 	movi	r20,1024
    1a58:	04400b0e 	bge	zero,r17,1a88 <__sfvwrite_small_dev+0x74>
    1a5c:	880f883a 	mov	r7,r17
    1a60:	a440010e 	bge	r20,r17,1a68 <__sfvwrite_small_dev+0x54>
    1a64:	01c10004 	movi	r7,1024
    1a68:	8140008f 	ldh	r5,2(r16)
    1a6c:	900d883a 	mov	r6,r18
    1a70:	9809883a 	mov	r4,r19
    1a74:	0001ae80 	call	1ae8 <_write_r>
    1a78:	0080050e 	bge	zero,r2,1a90 <__sfvwrite_small_dev+0x7c>
    1a7c:	88a3c83a 	sub	r17,r17,r2
    1a80:	90a5883a 	add	r18,r18,r2
    1a84:	003ff406 	br	1a58 <_gp+0xffff7b90>
    1a88:	0005883a 	mov	r2,zero
    1a8c:	00000706 	br	1aac <__sfvwrite_small_dev+0x98>
    1a90:	8080000b 	ldhu	r2,0(r16)
    1a94:	10801014 	ori	r2,r2,64
    1a98:	8080000d 	sth	r2,0(r16)
    1a9c:	00bfffc4 	movi	r2,-1
    1aa0:	00000206 	br	1aac <__sfvwrite_small_dev+0x98>
    1aa4:	00bfffc4 	movi	r2,-1
    1aa8:	f800283a 	ret
    1aac:	dfc00517 	ldw	ra,20(sp)
    1ab0:	dd000417 	ldw	r20,16(sp)
    1ab4:	dcc00317 	ldw	r19,12(sp)
    1ab8:	dc800217 	ldw	r18,8(sp)
    1abc:	dc400117 	ldw	r17,4(sp)
    1ac0:	dc000017 	ldw	r16,0(sp)
    1ac4:	dec00604 	addi	sp,sp,24
    1ac8:	f800283a 	ret

00001acc <strlen>:
    1acc:	2005883a 	mov	r2,r4
    1ad0:	10c00007 	ldb	r3,0(r2)
    1ad4:	18000226 	beq	r3,zero,1ae0 <strlen+0x14>
    1ad8:	10800044 	addi	r2,r2,1
    1adc:	003ffc06 	br	1ad0 <_gp+0xffff7c08>
    1ae0:	1105c83a 	sub	r2,r2,r4
    1ae4:	f800283a 	ret

00001ae8 <_write_r>:
    1ae8:	defffd04 	addi	sp,sp,-12
    1aec:	dc000015 	stw	r16,0(sp)
    1af0:	04000034 	movhi	r16,0
    1af4:	dc400115 	stw	r17,4(sp)
    1af8:	8407f204 	addi	r16,r16,8136
    1afc:	2023883a 	mov	r17,r4
    1b00:	2809883a 	mov	r4,r5
    1b04:	300b883a 	mov	r5,r6
    1b08:	380d883a 	mov	r6,r7
    1b0c:	dfc00215 	stw	ra,8(sp)
    1b10:	80000015 	stw	zero,0(r16)
    1b14:	0001c780 	call	1c78 <write>
    1b18:	00ffffc4 	movi	r3,-1
    1b1c:	10c0031e 	bne	r2,r3,1b2c <_write_r+0x44>
    1b20:	80c00017 	ldw	r3,0(r16)
    1b24:	18000126 	beq	r3,zero,1b2c <_write_r+0x44>
    1b28:	88c00015 	stw	r3,0(r17)
    1b2c:	dfc00217 	ldw	ra,8(sp)
    1b30:	dc400117 	ldw	r17,4(sp)
    1b34:	dc000017 	ldw	r16,0(sp)
    1b38:	dec00304 	addi	sp,sp,12
    1b3c:	f800283a 	ret

00001b40 <__mulsi3>:
    1b40:	0005883a 	mov	r2,zero
    1b44:	20000726 	beq	r4,zero,1b64 <__mulsi3+0x24>
    1b48:	20c0004c 	andi	r3,r4,1
    1b4c:	2008d07a 	srli	r4,r4,1
    1b50:	18000126 	beq	r3,zero,1b58 <__mulsi3+0x18>
    1b54:	1145883a 	add	r2,r2,r5
    1b58:	294b883a 	add	r5,r5,r5
    1b5c:	203ffa1e 	bne	r4,zero,1b48 <_gp+0xffff7c80>
    1b60:	f800283a 	ret
    1b64:	f800283a 	ret

00001b68 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1b68:	deffff04 	addi	sp,sp,-4
    1b6c:	01000034 	movhi	r4,0
    1b70:	01400034 	movhi	r5,0
    1b74:	dfc00015 	stw	ra,0(sp)
    1b78:	21077a04 	addi	r4,r4,7656
    1b7c:	2947b604 	addi	r5,r5,7896

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1b80:	2140061e 	bne	r4,r5,1b9c <alt_load+0x34>
    1b84:	01000034 	movhi	r4,0
    1b88:	01400034 	movhi	r5,0
    1b8c:	21040804 	addi	r4,r4,4128
    1b90:	29440804 	addi	r5,r5,4128
    1b94:	2140121e 	bne	r4,r5,1be0 <alt_load+0x78>
    1b98:	00000b06 	br	1bc8 <alt_load+0x60>
    1b9c:	00c00034 	movhi	r3,0
    1ba0:	18c7b604 	addi	r3,r3,7896
    1ba4:	1907c83a 	sub	r3,r3,r4
    1ba8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1bac:	10fff526 	beq	r2,r3,1b84 <_gp+0xffff7cbc>
    {
      *to++ = *from++;
    1bb0:	114f883a 	add	r7,r2,r5
    1bb4:	39c00017 	ldw	r7,0(r7)
    1bb8:	110d883a 	add	r6,r2,r4
    1bbc:	10800104 	addi	r2,r2,4
    1bc0:	31c00015 	stw	r7,0(r6)
    1bc4:	003ff906 	br	1bac <_gp+0xffff7ce4>
    1bc8:	01000034 	movhi	r4,0
    1bcc:	01400034 	movhi	r5,0
    1bd0:	21077204 	addi	r4,r4,7624
    1bd4:	29477204 	addi	r5,r5,7624

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1bd8:	2140101e 	bne	r4,r5,1c1c <alt_load+0xb4>
    1bdc:	00000b06 	br	1c0c <alt_load+0xa4>
    1be0:	00c00034 	movhi	r3,0
    1be4:	18c40804 	addi	r3,r3,4128
    1be8:	1907c83a 	sub	r3,r3,r4
    1bec:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1bf0:	10fff526 	beq	r2,r3,1bc8 <_gp+0xffff7d00>
    {
      *to++ = *from++;
    1bf4:	114f883a 	add	r7,r2,r5
    1bf8:	39c00017 	ldw	r7,0(r7)
    1bfc:	110d883a 	add	r6,r2,r4
    1c00:	10800104 	addi	r2,r2,4
    1c04:	31c00015 	stw	r7,0(r6)
    1c08:	003ff906 	br	1bf0 <_gp+0xffff7d28>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1c0c:	0001db80 	call	1db8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1c10:	dfc00017 	ldw	ra,0(sp)
    1c14:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1c18:	0001dbc1 	jmpi	1dbc <alt_icache_flush_all>
    1c1c:	00c00034 	movhi	r3,0
    1c20:	18c77a04 	addi	r3,r3,7656
    1c24:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1c28:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1c2c:	18bff726 	beq	r3,r2,1c0c <_gp+0xffff7d44>
    {
      *to++ = *from++;
    1c30:	114f883a 	add	r7,r2,r5
    1c34:	39c00017 	ldw	r7,0(r7)
    1c38:	110d883a 	add	r6,r2,r4
    1c3c:	10800104 	addi	r2,r2,4
    1c40:	31c00015 	stw	r7,0(r6)
    1c44:	003ff906 	br	1c2c <_gp+0xffff7d64>

00001c48 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1c48:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1c4c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1c50:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1c54:	0001cd80 	call	1cd8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1c58:	0001cf80 	call	1cf8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1c5c:	d1a04117 	ldw	r6,-32508(gp)
    1c60:	d1604217 	ldw	r5,-32504(gp)
    1c64:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1c68:	dfc00017 	ldw	ra,0(sp)
    1c6c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1c70:	000105c1 	jmpi	105c <main>

00001c74 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    1c74:	0001d301 	jmpi	1d30 <alt_busy_sleep>

00001c78 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    1c78:	00800044 	movi	r2,1
    1c7c:	20800226 	beq	r4,r2,1c88 <write+0x10>
    1c80:	00800084 	movi	r2,2
    1c84:	2080041e 	bne	r4,r2,1c98 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    1c88:	01000034 	movhi	r4,0
    1c8c:	000f883a 	mov	r7,zero
    1c90:	2107b404 	addi	r4,r4,7888
    1c94:	0001cfc1 	jmpi	1cfc <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1c98:	d0a00317 	ldw	r2,-32756(gp)
    1c9c:	10000926 	beq	r2,zero,1cc4 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1ca0:	deffff04 	addi	sp,sp,-4
    1ca4:	dfc00015 	stw	ra,0(sp)
    1ca8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1cac:	00c01444 	movi	r3,81
    1cb0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1cb4:	00bfffc4 	movi	r2,-1
    1cb8:	dfc00017 	ldw	ra,0(sp)
    1cbc:	dec00104 	addi	sp,sp,4
    1cc0:	f800283a 	ret
    1cc4:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1cc8:	00c01444 	movi	r3,81
    1ccc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1cd0:	00bfffc4 	movi	r2,-1
    1cd4:	f800283a 	ret

00001cd8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1cd8:	deffff04 	addi	sp,sp,-4
    1cdc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    1ce0:	0001dc00 	call	1dc0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1ce4:	00800044 	movi	r2,1
    1ce8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1cec:	dfc00017 	ldw	ra,0(sp)
    1cf0:	dec00104 	addi	sp,sp,4
    1cf4:	f800283a 	ret

00001cf8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1cf8:	f800283a 	ret

00001cfc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1cfc:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1d00:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1d04:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1d08:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1d0c:	2980072e 	bgeu	r5,r6,1d2c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1d10:	38c00037 	ldwio	r3,0(r7)
    1d14:	18ffffec 	andhi	r3,r3,65535
    1d18:	183ffc26 	beq	r3,zero,1d0c <_gp+0xffff7e44>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1d1c:	28c00007 	ldb	r3,0(r5)
    1d20:	20c00035 	stwio	r3,0(r4)
    1d24:	29400044 	addi	r5,r5,1
    1d28:	003ff806 	br	1d0c <_gp+0xffff7e44>

  return count;
}
    1d2c:	f800283a 	ret

00001d30 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1d30:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1d34:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1d38:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1d3c:	dc000015 	stw	r16,0(sp)
    1d40:	dfc00115 	stw	ra,4(sp)
    1d44:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1d48:	00012f40 	call	12f4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1d4c:	10001026 	beq	r2,zero,1d90 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1d50:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1d54:	013999b4 	movhi	r4,58982
    1d58:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1d5c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1d60:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1d64:	297fffc4 	addi	r5,r5,-1
    1d68:	283ffe1e 	bne	r5,zero,1d64 <_gp+0xffff7e9c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1d6c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1d70:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1d74:	18bffb16 	blt	r3,r2,1d64 <_gp+0xffff7e9c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1d78:	01400144 	movi	r5,5
    1d7c:	8009883a 	mov	r4,r16
    1d80:	0001b400 	call	1b40 <__mulsi3>
    1d84:	10bfffc4 	addi	r2,r2,-1
    1d88:	103ffe1e 	bne	r2,zero,1d84 <_gp+0xffff7ebc>
    1d8c:	00000506 	br	1da4 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1d90:	01400144 	movi	r5,5
    1d94:	8009883a 	mov	r4,r16
    1d98:	0001b400 	call	1b40 <__mulsi3>
    1d9c:	10bfffc4 	addi	r2,r2,-1
    1da0:	00bffe16 	blt	zero,r2,1d9c <_gp+0xffff7ed4>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    1da4:	0005883a 	mov	r2,zero
    1da8:	dfc00117 	ldw	ra,4(sp)
    1dac:	dc000017 	ldw	r16,0(sp)
    1db0:	dec00204 	addi	sp,sp,8
    1db4:	f800283a 	ret

00001db8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1db8:	f800283a 	ret

00001dbc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1dbc:	f800283a 	ret

00001dc0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1dc0:	000170fa 	wrctl	ienable,zero
    1dc4:	f800283a 	ret
