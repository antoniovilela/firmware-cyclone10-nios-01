
seg_led_sw.elf:     file format elf32-littlenios2
seg_led_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000f14 memsz 0x00000f14 flags r-x
    LOAD off    0x00001f34 vaddr 0x00008f34 paddr 0x00009024 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00002114 vaddr 0x00009114 paddr 0x00009114 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00002024  2**0
                  CONTENTS
  2 .text         00000ea4  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000070  00008ec4  00008ec4  00001ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00008f34  00009024  00001f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00009114  00009114  00002114  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00009124  00009124  00002024  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000310  00000000  00000000  00002048  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003f28  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000015fc  00000000  00000000  00006280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001a88  00000000  00000000  0000787c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000428  00000000  00000000  00009304  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000010d1  00000000  00000000  0000972c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001610  00000000  00000000  0000a7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000be10  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000260  00000000  00000000  0000be50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000d1be  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000d1c1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000d1cd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000d1ce  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000d1cf  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000d1da  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000d1e5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000005c  00000000  00000000  0000d1f9  2**0
                  CONTENTS, READONLY
 26 .jdi          0000501c  00000000  00000000  0000d255  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00045dee  00000000  00000000  00012271  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008ec4 l    d  .rodata	00000000 .rodata
00008f34 l    d  .rwdata	00000000 .rwdata
00009114 l    d  .bss	00000000 .bss
00009124 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../seg_led_sw_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 seg_led_sw.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008578 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00008f34 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008d44 g     F .text	0000002c alt_main
000084c8 g     F .text	00000080 _puts_r
00009024 g       *ABS*	00000000 __flash_rwdata_start
0000847c g     F .text	0000004c printf
00008ebc g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009114 g     O .bss	00000004 errno
0000911c g     O .bss	00000004 alt_argv
00011014 g       *ABS*	00000000 _gp
00008d70 g     F .text	00000004 usleep
00008418 g     F .text	00000028 memcpy
00008548 g     F .text	00000014 puts
00008440 g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000835c g     F .text	00000064 .hidden __udivsi3
00009014 g     O .rwdata	00000004 _global_impure_ptr
00009124 g       *ABS*	00000000 __bss_end
00008eb4 g     F .text	00000004 alt_dcache_flush_all
00009024 g       *ABS*	00000000 __ram_rwdata_end
00008d74 g     F .text	00000060 write
00008f34 g       *ABS*	00000000 __ram_rodata_end
0000901c g     O .rwdata	00000004 jtag_uart_0
000083c0 g     F .text	00000058 .hidden __umodsi3
00009124 g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_stack_pointer
00008df8 g     F .text	00000034 altera_avalon_jtag_uart_write
000085e4 g     F .text	0000052c ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
00008df4 g     F .text	00000004 alt_sys_init
00008c3c g     F .text	00000028 .hidden __mulsi3
00008f34 g       *ABS*	00000000 __ram_rwdata_start
00008ec4 g       *ABS*	00000000 __ram_rodata_start
00008e2c g     F .text	00000088 alt_busy_sleep
00009124 g       *ABS*	00000000 __alt_stack_base
00008b2c g     F .text	000000b8 __sfvwrite_small_dev
00009114 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000208 main
00009118 g     O .bss	00000004 alt_envp
00009020 g     O .rwdata	00000004 alt_errno
00008264 g     F .text	00000084 .hidden __divsi3
00008ec4 g       *ABS*	00000000 __flash_rodata_start
00008dd4 g     F .text	00000020 alt_irq_init
00008be4 g     F .text	00000058 _write_r
00009018 g     O .rwdata	00000004 _impure_ptr
00009120 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009024 g       *ABS*	00000000 _edata
00009124 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000082e8 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
0000855c g     F .text	0000001c strlen
00008eb8 g     F .text	00000004 alt_icache_flush_all
00008b10 g     F .text	0000001c __vfprintf_internal
00008c64 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6840514 	ori	gp,gp,4116
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a44514 	ori	r2,r2,37140

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e44914 	ori	r3,r3,37156

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7030>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008c640 	call	8c64 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008d440 	call	8d44 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7044>

0000805c <main>:
   SEG_EN_BASE [2:0]
   SEG_BASE [7:0]
   SW_BASE
   */
  //alt_putstr("Starting.\n");
  printf ("Starting.\n");
    805c:	01000074 	movhi	r4,1

#define read(base) IORD_ALTERA_AVALON_PIO_DATA(base)
#define write(base, data) IOWR_ALTERA_AVALON_PIO_DATA(base, data)

int main()
{ 
    8060:	defff004 	addi	sp,sp,-64
   SEG_EN_BASE [2:0]
   SEG_BASE [7:0]
   SW_BASE
   */
  //alt_putstr("Starting.\n");
  printf ("Starting.\n");
    8064:	2123b104 	addi	r4,r4,-28988

#define read(base) IORD_ALTERA_AVALON_PIO_DATA(base)
#define write(base, data) IOWR_ALTERA_AVALON_PIO_DATA(base, data)

int main()
{ 
    8068:	dfc00f15 	stw	ra,60(sp)
    806c:	dc000615 	stw	r16,24(sp)
    8070:	df000e15 	stw	fp,56(sp)
    8074:	ddc00d15 	stw	r23,52(sp)
    8078:	dd800c15 	stw	r22,48(sp)
    807c:	dd400b15 	stw	r21,44(sp)
    8080:	dd000a15 	stw	r20,40(sp)
    8084:	dcc00915 	stw	r19,36(sp)
    8088:	dc800815 	stw	r18,32(sp)
    808c:	dc400715 	stw	r17,28(sp)
   SEG_EN_BASE [2:0]
   SEG_BASE [7:0]
   SW_BASE
   */
  //alt_putstr("Starting.\n");
  printf ("Starting.\n");
    8090:	00085480 	call	8548 <puts>

  char seg_decode[16] = {
    8094:	01400074 	movhi	r5,1
    8098:	01800404 	movi	r6,16
    809c:	2963c744 	addi	r5,r5,-28899
    80a0:	d809883a 	mov	r4,sp
    80a4:	00084180 	call	8418 <memcpy>
	 0x79,
	 0x71
  };

  char dp = 0;
  write( SEG_EN_BASE, 0x7 );
    80a8:	04000074 	movhi	r16,1
    80ac:	84041804 	addi	r16,r16,4192
    80b0:	008001c4 	movi	r2,7
    80b4:	80800035 	stwio	r2,0(r16)
  write( SEG_BASE, ( ~seg_decode[0] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
    80b8:	04400074 	movhi	r17,1
    80bc:	8c441404 	addi	r17,r17,4176
    80c0:	00803004 	movi	r2,192
    80c4:	88800035 	stwio	r2,0(r17)
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
  char state = 0;
  while (1){
	  char sw = read( SW_BASE );
    80c8:	05c00074 	movhi	r23,1
  /* Event loop never exits. */
  unsigned int count = 0;
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
  char state = 0;
    80cc:	0005883a 	mov	r2,zero

  /* Event loop never exits. */
  unsigned int count = 0;
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
    80d0:	0029883a 	mov	r20,zero
  write( SEG_BASE, ( ~seg_decode[0] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );

  /* Event loop never exits. */
  unsigned int count = 0;
  char dig_0 = 0;
  char dig_1 = 0;
    80d4:	002b883a 	mov	r21,zero
  write( SEG_EN_BASE, 0x7 );
  write( SEG_BASE, ( ~seg_decode[0] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );

  /* Event loop never exits. */
  unsigned int count = 0;
  char dig_0 = 0;
    80d8:	002d883a 	mov	r22,zero
  char dp = 0;
  write( SEG_EN_BASE, 0x7 );
  write( SEG_BASE, ( ~seg_decode[0] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );

  /* Event loop never exits. */
  unsigned int count = 0;
    80dc:	0025883a 	mov	r18,zero
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
  char state = 0;
  while (1){
	  char sw = read( SW_BASE );
    80e0:	bdc41004 	addi	r23,r23,4160
    80e4:	bcc00037 	ldwio	r19,0(r23)
	  if ( sw != state && sw == 0 ){
    80e8:	10803fcc 	andi	r2,r2,255
    80ec:	98c03fcc 	andi	r3,r19,255
    80f0:	1080201c 	xori	r2,r2,128
    80f4:	18c0201c 	xori	r3,r3,128
    80f8:	10bfe004 	addi	r2,r2,-128
    80fc:	18ffe004 	addi	r3,r3,-128
    8100:	10c02c26 	beq	r2,r3,81b4 <main+0x158>
    8104:	18002b1e 	bne	r3,zero,81b4 <main+0x158>
		  //alt_putstr("Switched pressed.\n");
		  printf("Switched pressed.\n");
    8108:	01000074 	movhi	r4,1
    810c:	2123b404 	addi	r4,r4,-28976
    8110:	00085480 	call	8548 <puts>

		  ++count;
    8114:	94800044 	addi	r18,r18,1
		  dp = 0;
		  dig_0 = ( count % 10 );
    8118:	01400284 	movi	r5,10
    811c:	9009883a 	mov	r4,r18
    8120:	00083c00 	call	83c0 <__umodsi3>
		  dig_1 = ( ( count % 100 ) / 10 );
    8124:	01401904 	movi	r5,100
    8128:	9009883a 	mov	r4,r18
		  //alt_putstr("Switched pressed.\n");
		  printf("Switched pressed.\n");

		  ++count;
		  dp = 0;
		  dig_0 = ( count % 10 );
    812c:	102d883a 	mov	r22,r2
		  dig_1 = ( ( count % 100 ) / 10 );
    8130:	d8800515 	stw	r2,20(sp)
    8134:	00083c00 	call	83c0 <__umodsi3>
    8138:	01400284 	movi	r5,10
    813c:	1009883a 	mov	r4,r2
    8140:	000835c0 	call	835c <__udivsi3>
		  dig_2 = ( ( count % 1000 ) / 100 );
    8144:	0140fa04 	movi	r5,1000
    8148:	9009883a 	mov	r4,r18
		  printf("Switched pressed.\n");

		  ++count;
		  dp = 0;
		  dig_0 = ( count % 10 );
		  dig_1 = ( ( count % 100 ) / 10 );
    814c:	102b883a 	mov	r21,r2
		  dig_2 = ( ( count % 1000 ) / 100 );
    8150:	d8800415 	stw	r2,16(sp)
    8154:	00083c00 	call	83c0 <__umodsi3>
    8158:	01401904 	movi	r5,100
    815c:	1009883a 	mov	r4,r2
    8160:	000835c0 	call	835c <__udivsi3>

		  printf ( "Count: %d\n", count );
    8164:	01000074 	movhi	r4,1
    8168:	900b883a 	mov	r5,r18
    816c:	2123b904 	addi	r4,r4,-28956

		  ++count;
		  dp = 0;
		  dig_0 = ( count % 10 );
		  dig_1 = ( ( count % 100 ) / 10 );
		  dig_2 = ( ( count % 1000 ) / 100 );
    8170:	1039883a 	mov	fp,r2
    8174:	1029883a 	mov	r20,r2

		  printf ( "Count: %d\n", count );
    8178:	000847c0 	call	847c <printf>
		  //alt_putstr( "Digit 0: " ); alt_putchar( (char)(dig_0+48) ); alt_putstr( "\n" );
		  printf ( "Digit 0: %d\n", dig_0 );
    817c:	d9800517 	ldw	r6,20(sp)
    8180:	01000074 	movhi	r4,1
    8184:	2123bc04 	addi	r4,r4,-28944
    8188:	300b883a 	mov	r5,r6
    818c:	000847c0 	call	847c <printf>
		  printf ( "Digit 1: %d\n", dig_1 );
    8190:	d8c00417 	ldw	r3,16(sp)
    8194:	01000074 	movhi	r4,1
    8198:	2123c004 	addi	r4,r4,-28928
    819c:	180b883a 	mov	r5,r3
    81a0:	000847c0 	call	847c <printf>
		  printf ( "Digit 2: %d\n", dig_2 );
    81a4:	01000074 	movhi	r4,1
    81a8:	e00b883a 	mov	r5,fp
    81ac:	2123c404 	addi	r4,r4,-28912
    81b0:	000847c0 	call	847c <printf>
	  }
	  state = sw;

	  write( SEG_EN_BASE, 0x0 );
    81b4:	80000035 	stwio	zero,0(r16)
	  write( SEG_BASE, ( ~seg_decode[ dig_0 ] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
    81b8:	b0803fcc 	andi	r2,r22,255
    81bc:	1080201c 	xori	r2,r2,128
    81c0:	10bfe004 	addi	r2,r2,-128
    81c4:	d885883a 	add	r2,sp,r2
    81c8:	10800007 	ldb	r2,0(r2)
    81cc:	0084303a 	nor	r2,zero,r2
    81d0:	10801fcc 	andi	r2,r2,127
    81d4:	10802014 	ori	r2,r2,128
    81d8:	88800035 	stwio	r2,0(r17)
	  write( SEG_EN_BASE, 0x4 );
    81dc:	00800104 	movi	r2,4
    81e0:	80800035 	stwio	r2,0(r16)
	  usleep( 100 );
    81e4:	01001904 	movi	r4,100
    81e8:	0008d700 	call	8d70 <usleep>

	  write( SEG_EN_BASE, 0x0 );
    81ec:	80000035 	stwio	zero,0(r16)
	  write( SEG_BASE, ( ~seg_decode[ dig_1 ] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
    81f0:	a8803fcc 	andi	r2,r21,255
    81f4:	1080201c 	xori	r2,r2,128
    81f8:	10bfe004 	addi	r2,r2,-128
    81fc:	d885883a 	add	r2,sp,r2
    8200:	10800007 	ldb	r2,0(r2)
    8204:	0084303a 	nor	r2,zero,r2
    8208:	10801fcc 	andi	r2,r2,127
    820c:	10802014 	ori	r2,r2,128
    8210:	88800035 	stwio	r2,0(r17)
	  write( SEG_EN_BASE, 0x2 );
    8214:	00800084 	movi	r2,2
    8218:	80800035 	stwio	r2,0(r16)
	  usleep( 100 );
    821c:	01001904 	movi	r4,100
    8220:	0008d700 	call	8d70 <usleep>

	  write( SEG_EN_BASE, 0x0 );
    8224:	80000035 	stwio	zero,0(r16)
	  write( SEG_BASE, ( ~seg_decode[ dig_2 ] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
    8228:	a0803fcc 	andi	r2,r20,255
    822c:	1080201c 	xori	r2,r2,128
    8230:	10bfe004 	addi	r2,r2,-128
    8234:	d885883a 	add	r2,sp,r2
    8238:	10800007 	ldb	r2,0(r2)
    823c:	0084303a 	nor	r2,zero,r2
    8240:	10801fcc 	andi	r2,r2,127
    8244:	10802014 	ori	r2,r2,128
    8248:	88800035 	stwio	r2,0(r17)
	  write( SEG_EN_BASE, 0x1 );
    824c:	00800044 	movi	r2,1
    8250:	80800035 	stwio	r2,0(r16)
	  usleep( 100 );
    8254:	01001904 	movi	r4,100
    8258:	0008d700 	call	8d70 <usleep>
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
  char state = 0;
  while (1){
	  char sw = read( SW_BASE );
    825c:	9805883a 	mov	r2,r19

	  write( SEG_EN_BASE, 0x0 );
	  write( SEG_BASE, ( ~seg_decode[ dig_2 ] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
	  write( SEG_EN_BASE, 0x1 );
	  usleep( 100 );
  }
    8260:	003fa006 	br	80e4 <_gp+0xffff70d0>

00008264 <__divsi3>:
    8264:	20001b16 	blt	r4,zero,82d4 <__divsi3+0x70>
    8268:	000f883a 	mov	r7,zero
    826c:	28001616 	blt	r5,zero,82c8 <__divsi3+0x64>
    8270:	200d883a 	mov	r6,r4
    8274:	29001a2e 	bgeu	r5,r4,82e0 <__divsi3+0x7c>
    8278:	00800804 	movi	r2,32
    827c:	00c00044 	movi	r3,1
    8280:	00000106 	br	8288 <__divsi3+0x24>
    8284:	10000d26 	beq	r2,zero,82bc <__divsi3+0x58>
    8288:	294b883a 	add	r5,r5,r5
    828c:	10bfffc4 	addi	r2,r2,-1
    8290:	18c7883a 	add	r3,r3,r3
    8294:	293ffb36 	bltu	r5,r4,8284 <_gp+0xffff7270>
    8298:	0005883a 	mov	r2,zero
    829c:	18000726 	beq	r3,zero,82bc <__divsi3+0x58>
    82a0:	0005883a 	mov	r2,zero
    82a4:	31400236 	bltu	r6,r5,82b0 <__divsi3+0x4c>
    82a8:	314dc83a 	sub	r6,r6,r5
    82ac:	10c4b03a 	or	r2,r2,r3
    82b0:	1806d07a 	srli	r3,r3,1
    82b4:	280ad07a 	srli	r5,r5,1
    82b8:	183ffa1e 	bne	r3,zero,82a4 <_gp+0xffff7290>
    82bc:	38000126 	beq	r7,zero,82c4 <__divsi3+0x60>
    82c0:	0085c83a 	sub	r2,zero,r2
    82c4:	f800283a 	ret
    82c8:	014bc83a 	sub	r5,zero,r5
    82cc:	39c0005c 	xori	r7,r7,1
    82d0:	003fe706 	br	8270 <_gp+0xffff725c>
    82d4:	0109c83a 	sub	r4,zero,r4
    82d8:	01c00044 	movi	r7,1
    82dc:	003fe306 	br	826c <_gp+0xffff7258>
    82e0:	00c00044 	movi	r3,1
    82e4:	003fee06 	br	82a0 <_gp+0xffff728c>

000082e8 <__modsi3>:
    82e8:	20001716 	blt	r4,zero,8348 <__modsi3+0x60>
    82ec:	000f883a 	mov	r7,zero
    82f0:	2005883a 	mov	r2,r4
    82f4:	28001216 	blt	r5,zero,8340 <__modsi3+0x58>
    82f8:	2900162e 	bgeu	r5,r4,8354 <__modsi3+0x6c>
    82fc:	01800804 	movi	r6,32
    8300:	00c00044 	movi	r3,1
    8304:	00000106 	br	830c <__modsi3+0x24>
    8308:	30000a26 	beq	r6,zero,8334 <__modsi3+0x4c>
    830c:	294b883a 	add	r5,r5,r5
    8310:	31bfffc4 	addi	r6,r6,-1
    8314:	18c7883a 	add	r3,r3,r3
    8318:	293ffb36 	bltu	r5,r4,8308 <_gp+0xffff72f4>
    831c:	18000526 	beq	r3,zero,8334 <__modsi3+0x4c>
    8320:	1806d07a 	srli	r3,r3,1
    8324:	11400136 	bltu	r2,r5,832c <__modsi3+0x44>
    8328:	1145c83a 	sub	r2,r2,r5
    832c:	280ad07a 	srli	r5,r5,1
    8330:	183ffb1e 	bne	r3,zero,8320 <_gp+0xffff730c>
    8334:	38000126 	beq	r7,zero,833c <__modsi3+0x54>
    8338:	0085c83a 	sub	r2,zero,r2
    833c:	f800283a 	ret
    8340:	014bc83a 	sub	r5,zero,r5
    8344:	003fec06 	br	82f8 <_gp+0xffff72e4>
    8348:	0109c83a 	sub	r4,zero,r4
    834c:	01c00044 	movi	r7,1
    8350:	003fe706 	br	82f0 <_gp+0xffff72dc>
    8354:	00c00044 	movi	r3,1
    8358:	003ff106 	br	8320 <_gp+0xffff730c>

0000835c <__udivsi3>:
    835c:	200d883a 	mov	r6,r4
    8360:	2900152e 	bgeu	r5,r4,83b8 <__udivsi3+0x5c>
    8364:	28001416 	blt	r5,zero,83b8 <__udivsi3+0x5c>
    8368:	00800804 	movi	r2,32
    836c:	00c00044 	movi	r3,1
    8370:	00000206 	br	837c <__udivsi3+0x20>
    8374:	10000e26 	beq	r2,zero,83b0 <__udivsi3+0x54>
    8378:	28000516 	blt	r5,zero,8390 <__udivsi3+0x34>
    837c:	294b883a 	add	r5,r5,r5
    8380:	10bfffc4 	addi	r2,r2,-1
    8384:	18c7883a 	add	r3,r3,r3
    8388:	293ffa36 	bltu	r5,r4,8374 <_gp+0xffff7360>
    838c:	18000826 	beq	r3,zero,83b0 <__udivsi3+0x54>
    8390:	0005883a 	mov	r2,zero
    8394:	31400236 	bltu	r6,r5,83a0 <__udivsi3+0x44>
    8398:	314dc83a 	sub	r6,r6,r5
    839c:	10c4b03a 	or	r2,r2,r3
    83a0:	1806d07a 	srli	r3,r3,1
    83a4:	280ad07a 	srli	r5,r5,1
    83a8:	183ffa1e 	bne	r3,zero,8394 <_gp+0xffff7380>
    83ac:	f800283a 	ret
    83b0:	0005883a 	mov	r2,zero
    83b4:	f800283a 	ret
    83b8:	00c00044 	movi	r3,1
    83bc:	003ff406 	br	8390 <_gp+0xffff737c>

000083c0 <__umodsi3>:
    83c0:	2005883a 	mov	r2,r4
    83c4:	2900122e 	bgeu	r5,r4,8410 <__umodsi3+0x50>
    83c8:	28001116 	blt	r5,zero,8410 <__umodsi3+0x50>
    83cc:	01800804 	movi	r6,32
    83d0:	00c00044 	movi	r3,1
    83d4:	00000206 	br	83e0 <__umodsi3+0x20>
    83d8:	30000c26 	beq	r6,zero,840c <__umodsi3+0x4c>
    83dc:	28000516 	blt	r5,zero,83f4 <__umodsi3+0x34>
    83e0:	294b883a 	add	r5,r5,r5
    83e4:	31bfffc4 	addi	r6,r6,-1
    83e8:	18c7883a 	add	r3,r3,r3
    83ec:	293ffa36 	bltu	r5,r4,83d8 <_gp+0xffff73c4>
    83f0:	18000626 	beq	r3,zero,840c <__umodsi3+0x4c>
    83f4:	1806d07a 	srli	r3,r3,1
    83f8:	11400136 	bltu	r2,r5,8400 <__umodsi3+0x40>
    83fc:	1145c83a 	sub	r2,r2,r5
    8400:	280ad07a 	srli	r5,r5,1
    8404:	183ffb1e 	bne	r3,zero,83f4 <_gp+0xffff73e0>
    8408:	f800283a 	ret
    840c:	f800283a 	ret
    8410:	00c00044 	movi	r3,1
    8414:	003ff706 	br	83f4 <_gp+0xffff73e0>

00008418 <memcpy>:
    8418:	2005883a 	mov	r2,r4
    841c:	2007883a 	mov	r3,r4
    8420:	218d883a 	add	r6,r4,r6
    8424:	19800526 	beq	r3,r6,843c <memcpy+0x24>
    8428:	29000003 	ldbu	r4,0(r5)
    842c:	18c00044 	addi	r3,r3,1
    8430:	29400044 	addi	r5,r5,1
    8434:	193fffc5 	stb	r4,-1(r3)
    8438:	003ffa06 	br	8424 <_gp+0xffff7410>
    843c:	f800283a 	ret

00008440 <_printf_r>:
    8440:	defffd04 	addi	sp,sp,-12
    8444:	dfc00015 	stw	ra,0(sp)
    8448:	d9800115 	stw	r6,4(sp)
    844c:	d9c00215 	stw	r7,8(sp)
    8450:	20c00217 	ldw	r3,8(r4)
    8454:	01800074 	movhi	r6,1
    8458:	31a2cb04 	addi	r6,r6,-29908
    845c:	19800115 	stw	r6,4(r3)
    8460:	280d883a 	mov	r6,r5
    8464:	21400217 	ldw	r5,8(r4)
    8468:	d9c00104 	addi	r7,sp,4
    846c:	00085e40 	call	85e4 <___vfprintf_internal_r>
    8470:	dfc00017 	ldw	ra,0(sp)
    8474:	dec00304 	addi	sp,sp,12
    8478:	f800283a 	ret

0000847c <printf>:
    847c:	defffc04 	addi	sp,sp,-16
    8480:	dfc00015 	stw	ra,0(sp)
    8484:	d9400115 	stw	r5,4(sp)
    8488:	d9800215 	stw	r6,8(sp)
    848c:	d9c00315 	stw	r7,12(sp)
    8490:	00800074 	movhi	r2,1
    8494:	10a40604 	addi	r2,r2,-28648
    8498:	10800017 	ldw	r2,0(r2)
    849c:	01400074 	movhi	r5,1
    84a0:	2962cb04 	addi	r5,r5,-29908
    84a4:	10c00217 	ldw	r3,8(r2)
    84a8:	d9800104 	addi	r6,sp,4
    84ac:	19400115 	stw	r5,4(r3)
    84b0:	200b883a 	mov	r5,r4
    84b4:	11000217 	ldw	r4,8(r2)
    84b8:	0008b100 	call	8b10 <__vfprintf_internal>
    84bc:	dfc00017 	ldw	ra,0(sp)
    84c0:	dec00404 	addi	sp,sp,16
    84c4:	f800283a 	ret

000084c8 <_puts_r>:
    84c8:	defffd04 	addi	sp,sp,-12
    84cc:	dc000015 	stw	r16,0(sp)
    84d0:	2021883a 	mov	r16,r4
    84d4:	2809883a 	mov	r4,r5
    84d8:	dfc00215 	stw	ra,8(sp)
    84dc:	dc400115 	stw	r17,4(sp)
    84e0:	2823883a 	mov	r17,r5
    84e4:	000855c0 	call	855c <strlen>
    84e8:	81400217 	ldw	r5,8(r16)
    84ec:	01000074 	movhi	r4,1
    84f0:	2122cb04 	addi	r4,r4,-29908
    84f4:	29000115 	stw	r4,4(r5)
    84f8:	100f883a 	mov	r7,r2
    84fc:	880d883a 	mov	r6,r17
    8500:	8009883a 	mov	r4,r16
    8504:	0008b2c0 	call	8b2c <__sfvwrite_small_dev>
    8508:	00ffffc4 	movi	r3,-1
    850c:	10c00926 	beq	r2,r3,8534 <_puts_r+0x6c>
    8510:	81400217 	ldw	r5,8(r16)
    8514:	01800074 	movhi	r6,1
    8518:	01c00044 	movi	r7,1
    851c:	28800117 	ldw	r2,4(r5)
    8520:	31a3cc04 	addi	r6,r6,-28880
    8524:	8009883a 	mov	r4,r16
    8528:	103ee83a 	callr	r2
    852c:	10bfffe0 	cmpeqi	r2,r2,-1
    8530:	0085c83a 	sub	r2,zero,r2
    8534:	dfc00217 	ldw	ra,8(sp)
    8538:	dc400117 	ldw	r17,4(sp)
    853c:	dc000017 	ldw	r16,0(sp)
    8540:	dec00304 	addi	sp,sp,12
    8544:	f800283a 	ret

00008548 <puts>:
    8548:	00800074 	movhi	r2,1
    854c:	10a40604 	addi	r2,r2,-28648
    8550:	200b883a 	mov	r5,r4
    8554:	11000017 	ldw	r4,0(r2)
    8558:	00084c81 	jmpi	84c8 <_puts_r>

0000855c <strlen>:
    855c:	2005883a 	mov	r2,r4
    8560:	10c00007 	ldb	r3,0(r2)
    8564:	18000226 	beq	r3,zero,8570 <strlen+0x14>
    8568:	10800044 	addi	r2,r2,1
    856c:	003ffc06 	br	8560 <_gp+0xffff754c>
    8570:	1105c83a 	sub	r2,r2,r4
    8574:	f800283a 	ret

00008578 <print_repeat>:
    8578:	defffb04 	addi	sp,sp,-20
    857c:	dc800315 	stw	r18,12(sp)
    8580:	dc400215 	stw	r17,8(sp)
    8584:	dc000115 	stw	r16,4(sp)
    8588:	dfc00415 	stw	ra,16(sp)
    858c:	2025883a 	mov	r18,r4
    8590:	2823883a 	mov	r17,r5
    8594:	d9800005 	stb	r6,0(sp)
    8598:	3821883a 	mov	r16,r7
    859c:	04000a0e 	bge	zero,r16,85c8 <print_repeat+0x50>
    85a0:	88800117 	ldw	r2,4(r17)
    85a4:	01c00044 	movi	r7,1
    85a8:	d80d883a 	mov	r6,sp
    85ac:	880b883a 	mov	r5,r17
    85b0:	9009883a 	mov	r4,r18
    85b4:	103ee83a 	callr	r2
    85b8:	843fffc4 	addi	r16,r16,-1
    85bc:	103ff726 	beq	r2,zero,859c <_gp+0xffff7588>
    85c0:	00bfffc4 	movi	r2,-1
    85c4:	00000106 	br	85cc <print_repeat+0x54>
    85c8:	0005883a 	mov	r2,zero
    85cc:	dfc00417 	ldw	ra,16(sp)
    85d0:	dc800317 	ldw	r18,12(sp)
    85d4:	dc400217 	ldw	r17,8(sp)
    85d8:	dc000117 	ldw	r16,4(sp)
    85dc:	dec00504 	addi	sp,sp,20
    85e0:	f800283a 	ret

000085e4 <___vfprintf_internal_r>:
    85e4:	deffe504 	addi	sp,sp,-108
    85e8:	d8c00804 	addi	r3,sp,32
    85ec:	ddc01815 	stw	r23,96(sp)
    85f0:	dd801715 	stw	r22,92(sp)
    85f4:	dd401615 	stw	r21,88(sp)
    85f8:	dd001515 	stw	r20,84(sp)
    85fc:	dcc01415 	stw	r19,80(sp)
    8600:	dc801315 	stw	r18,76(sp)
    8604:	dc401215 	stw	r17,72(sp)
    8608:	dc001115 	stw	r16,68(sp)
    860c:	dfc01a15 	stw	ra,104(sp)
    8610:	df001915 	stw	fp,100(sp)
    8614:	2029883a 	mov	r20,r4
    8618:	2823883a 	mov	r17,r5
    861c:	382d883a 	mov	r22,r7
    8620:	d9800f15 	stw	r6,60(sp)
    8624:	0021883a 	mov	r16,zero
    8628:	d8000e15 	stw	zero,56(sp)
    862c:	d8000a15 	stw	zero,40(sp)
    8630:	002b883a 	mov	r21,zero
    8634:	0027883a 	mov	r19,zero
    8638:	0025883a 	mov	r18,zero
    863c:	d8000c15 	stw	zero,48(sp)
    8640:	d8000b15 	stw	zero,44(sp)
    8644:	002f883a 	mov	r23,zero
    8648:	d8c00915 	stw	r3,36(sp)
    864c:	d8c00f17 	ldw	r3,60(sp)
    8650:	19000003 	ldbu	r4,0(r3)
    8654:	20803fcc 	andi	r2,r4,255
    8658:	1080201c 	xori	r2,r2,128
    865c:	10bfe004 	addi	r2,r2,-128
    8660:	10011e26 	beq	r2,zero,8adc <___vfprintf_internal_r+0x4f8>
    8664:	00c00044 	movi	r3,1
    8668:	b8c01426 	beq	r23,r3,86bc <___vfprintf_internal_r+0xd8>
    866c:	1dc00216 	blt	r3,r23,8678 <___vfprintf_internal_r+0x94>
    8670:	b8000626 	beq	r23,zero,868c <___vfprintf_internal_r+0xa8>
    8674:	00011506 	br	8acc <___vfprintf_internal_r+0x4e8>
    8678:	01400084 	movi	r5,2
    867c:	b9401d26 	beq	r23,r5,86f4 <___vfprintf_internal_r+0x110>
    8680:	014000c4 	movi	r5,3
    8684:	b9402b26 	beq	r23,r5,8734 <___vfprintf_internal_r+0x150>
    8688:	00011006 	br	8acc <___vfprintf_internal_r+0x4e8>
    868c:	01400944 	movi	r5,37
    8690:	1140fc26 	beq	r2,r5,8a84 <___vfprintf_internal_r+0x4a0>
    8694:	88800117 	ldw	r2,4(r17)
    8698:	d9000005 	stb	r4,0(sp)
    869c:	01c00044 	movi	r7,1
    86a0:	d80d883a 	mov	r6,sp
    86a4:	880b883a 	mov	r5,r17
    86a8:	a009883a 	mov	r4,r20
    86ac:	103ee83a 	callr	r2
    86b0:	1000d81e 	bne	r2,zero,8a14 <___vfprintf_internal_r+0x430>
    86b4:	84000044 	addi	r16,r16,1
    86b8:	00010406 	br	8acc <___vfprintf_internal_r+0x4e8>
    86bc:	01400c04 	movi	r5,48
    86c0:	1140fa26 	beq	r2,r5,8aac <___vfprintf_internal_r+0x4c8>
    86c4:	01400944 	movi	r5,37
    86c8:	11400a1e 	bne	r2,r5,86f4 <___vfprintf_internal_r+0x110>
    86cc:	d8800005 	stb	r2,0(sp)
    86d0:	88800117 	ldw	r2,4(r17)
    86d4:	b80f883a 	mov	r7,r23
    86d8:	d80d883a 	mov	r6,sp
    86dc:	880b883a 	mov	r5,r17
    86e0:	a009883a 	mov	r4,r20
    86e4:	103ee83a 	callr	r2
    86e8:	1000ca1e 	bne	r2,zero,8a14 <___vfprintf_internal_r+0x430>
    86ec:	84000044 	addi	r16,r16,1
    86f0:	0000f506 	br	8ac8 <___vfprintf_internal_r+0x4e4>
    86f4:	25fff404 	addi	r23,r4,-48
    86f8:	bdc03fcc 	andi	r23,r23,255
    86fc:	00c00244 	movi	r3,9
    8700:	1dc00936 	bltu	r3,r23,8728 <___vfprintf_internal_r+0x144>
    8704:	00bfffc4 	movi	r2,-1
    8708:	90800426 	beq	r18,r2,871c <___vfprintf_internal_r+0x138>
    870c:	01400284 	movi	r5,10
    8710:	9009883a 	mov	r4,r18
    8714:	0008c3c0 	call	8c3c <__mulsi3>
    8718:	00000106 	br	8720 <___vfprintf_internal_r+0x13c>
    871c:	0005883a 	mov	r2,zero
    8720:	b8a5883a 	add	r18,r23,r2
    8724:	0000e206 	br	8ab0 <___vfprintf_internal_r+0x4cc>
    8728:	01400b84 	movi	r5,46
    872c:	1140e426 	beq	r2,r5,8ac0 <___vfprintf_internal_r+0x4dc>
    8730:	05c00084 	movi	r23,2
    8734:	213ff404 	addi	r4,r4,-48
    8738:	27003fcc 	andi	fp,r4,255
    873c:	00c00244 	movi	r3,9
    8740:	1f000936 	bltu	r3,fp,8768 <___vfprintf_internal_r+0x184>
    8744:	00bfffc4 	movi	r2,-1
    8748:	98800426 	beq	r19,r2,875c <___vfprintf_internal_r+0x178>
    874c:	01400284 	movi	r5,10
    8750:	9809883a 	mov	r4,r19
    8754:	0008c3c0 	call	8c3c <__mulsi3>
    8758:	00000106 	br	8760 <___vfprintf_internal_r+0x17c>
    875c:	0005883a 	mov	r2,zero
    8760:	e0a7883a 	add	r19,fp,r2
    8764:	0000d906 	br	8acc <___vfprintf_internal_r+0x4e8>
    8768:	00c01b04 	movi	r3,108
    876c:	10c0d226 	beq	r2,r3,8ab8 <___vfprintf_internal_r+0x4d4>
    8770:	013fffc4 	movi	r4,-1
    8774:	99000226 	beq	r19,r4,8780 <___vfprintf_internal_r+0x19c>
    8778:	d8000b15 	stw	zero,44(sp)
    877c:	00000106 	br	8784 <___vfprintf_internal_r+0x1a0>
    8780:	04c00044 	movi	r19,1
    8784:	01001a44 	movi	r4,105
    8788:	11001626 	beq	r2,r4,87e4 <___vfprintf_internal_r+0x200>
    878c:	20800916 	blt	r4,r2,87b4 <___vfprintf_internal_r+0x1d0>
    8790:	010018c4 	movi	r4,99
    8794:	11008826 	beq	r2,r4,89b8 <___vfprintf_internal_r+0x3d4>
    8798:	01001904 	movi	r4,100
    879c:	11001126 	beq	r2,r4,87e4 <___vfprintf_internal_r+0x200>
    87a0:	01001604 	movi	r4,88
    87a4:	1100c81e 	bne	r2,r4,8ac8 <___vfprintf_internal_r+0x4e4>
    87a8:	00c00044 	movi	r3,1
    87ac:	d8c00e15 	stw	r3,56(sp)
    87b0:	00001506 	br	8808 <___vfprintf_internal_r+0x224>
    87b4:	01001cc4 	movi	r4,115
    87b8:	11009826 	beq	r2,r4,8a1c <___vfprintf_internal_r+0x438>
    87bc:	20800416 	blt	r4,r2,87d0 <___vfprintf_internal_r+0x1ec>
    87c0:	01001bc4 	movi	r4,111
    87c4:	1100c01e 	bne	r2,r4,8ac8 <___vfprintf_internal_r+0x4e4>
    87c8:	05400204 	movi	r21,8
    87cc:	00000f06 	br	880c <___vfprintf_internal_r+0x228>
    87d0:	01001d44 	movi	r4,117
    87d4:	11000d26 	beq	r2,r4,880c <___vfprintf_internal_r+0x228>
    87d8:	01001e04 	movi	r4,120
    87dc:	11000a26 	beq	r2,r4,8808 <___vfprintf_internal_r+0x224>
    87e0:	0000b906 	br	8ac8 <___vfprintf_internal_r+0x4e4>
    87e4:	d8c00a17 	ldw	r3,40(sp)
    87e8:	b7000104 	addi	fp,r22,4
    87ec:	18000726 	beq	r3,zero,880c <___vfprintf_internal_r+0x228>
    87f0:	df000d15 	stw	fp,52(sp)
    87f4:	b5c00017 	ldw	r23,0(r22)
    87f8:	b800080e 	bge	r23,zero,881c <___vfprintf_internal_r+0x238>
    87fc:	05efc83a 	sub	r23,zero,r23
    8800:	02400044 	movi	r9,1
    8804:	00000606 	br	8820 <___vfprintf_internal_r+0x23c>
    8808:	05400404 	movi	r21,16
    880c:	b0c00104 	addi	r3,r22,4
    8810:	d8c00d15 	stw	r3,52(sp)
    8814:	b5c00017 	ldw	r23,0(r22)
    8818:	d8000a15 	stw	zero,40(sp)
    881c:	0013883a 	mov	r9,zero
    8820:	d839883a 	mov	fp,sp
    8824:	b8001726 	beq	r23,zero,8884 <___vfprintf_internal_r+0x2a0>
    8828:	a80b883a 	mov	r5,r21
    882c:	b809883a 	mov	r4,r23
    8830:	da401015 	stw	r9,64(sp)
    8834:	000835c0 	call	835c <__udivsi3>
    8838:	a80b883a 	mov	r5,r21
    883c:	1009883a 	mov	r4,r2
    8840:	102d883a 	mov	r22,r2
    8844:	0008c3c0 	call	8c3c <__mulsi3>
    8848:	b885c83a 	sub	r2,r23,r2
    884c:	00c00244 	movi	r3,9
    8850:	da401017 	ldw	r9,64(sp)
    8854:	18800216 	blt	r3,r2,8860 <___vfprintf_internal_r+0x27c>
    8858:	10800c04 	addi	r2,r2,48
    885c:	00000506 	br	8874 <___vfprintf_internal_r+0x290>
    8860:	d8c00e17 	ldw	r3,56(sp)
    8864:	18000226 	beq	r3,zero,8870 <___vfprintf_internal_r+0x28c>
    8868:	10800dc4 	addi	r2,r2,55
    886c:	00000106 	br	8874 <___vfprintf_internal_r+0x290>
    8870:	108015c4 	addi	r2,r2,87
    8874:	e0800005 	stb	r2,0(fp)
    8878:	b02f883a 	mov	r23,r22
    887c:	e7000044 	addi	fp,fp,1
    8880:	003fe806 	br	8824 <_gp+0xffff7810>
    8884:	e6efc83a 	sub	r23,fp,sp
    8888:	9dc5c83a 	sub	r2,r19,r23
    888c:	0080090e 	bge	zero,r2,88b4 <___vfprintf_internal_r+0x2d0>
    8890:	e085883a 	add	r2,fp,r2
    8894:	01400c04 	movi	r5,48
    8898:	d8c00917 	ldw	r3,36(sp)
    889c:	e009883a 	mov	r4,fp
    88a0:	e0c0032e 	bgeu	fp,r3,88b0 <___vfprintf_internal_r+0x2cc>
    88a4:	e7000044 	addi	fp,fp,1
    88a8:	21400005 	stb	r5,0(r4)
    88ac:	e0bffa1e 	bne	fp,r2,8898 <_gp+0xffff7884>
    88b0:	e6efc83a 	sub	r23,fp,sp
    88b4:	d8c00b17 	ldw	r3,44(sp)
    88b8:	4dd1883a 	add	r8,r9,r23
    88bc:	922dc83a 	sub	r22,r18,r8
    88c0:	18001626 	beq	r3,zero,891c <___vfprintf_internal_r+0x338>
    88c4:	48000a26 	beq	r9,zero,88f0 <___vfprintf_internal_r+0x30c>
    88c8:	00800b44 	movi	r2,45
    88cc:	d8800805 	stb	r2,32(sp)
    88d0:	88800117 	ldw	r2,4(r17)
    88d4:	01c00044 	movi	r7,1
    88d8:	d9800804 	addi	r6,sp,32
    88dc:	880b883a 	mov	r5,r17
    88e0:	a009883a 	mov	r4,r20
    88e4:	103ee83a 	callr	r2
    88e8:	10004a1e 	bne	r2,zero,8a14 <___vfprintf_internal_r+0x430>
    88ec:	84000044 	addi	r16,r16,1
    88f0:	0580070e 	bge	zero,r22,8910 <___vfprintf_internal_r+0x32c>
    88f4:	b00f883a 	mov	r7,r22
    88f8:	01800c04 	movi	r6,48
    88fc:	880b883a 	mov	r5,r17
    8900:	a009883a 	mov	r4,r20
    8904:	00085780 	call	8578 <print_repeat>
    8908:	1000421e 	bne	r2,zero,8a14 <___vfprintf_internal_r+0x430>
    890c:	85a1883a 	add	r16,r16,r22
    8910:	e02d883a 	mov	r22,fp
    8914:	bf2fc83a 	sub	r23,r23,fp
    8918:	00002006 	br	899c <___vfprintf_internal_r+0x3b8>
    891c:	0580090e 	bge	zero,r22,8944 <___vfprintf_internal_r+0x360>
    8920:	b00f883a 	mov	r7,r22
    8924:	01800804 	movi	r6,32
    8928:	880b883a 	mov	r5,r17
    892c:	a009883a 	mov	r4,r20
    8930:	da401015 	stw	r9,64(sp)
    8934:	00085780 	call	8578 <print_repeat>
    8938:	da401017 	ldw	r9,64(sp)
    893c:	1000351e 	bne	r2,zero,8a14 <___vfprintf_internal_r+0x430>
    8940:	85a1883a 	add	r16,r16,r22
    8944:	483ff226 	beq	r9,zero,8910 <_gp+0xffff78fc>
    8948:	00800b44 	movi	r2,45
    894c:	d8800805 	stb	r2,32(sp)
    8950:	88800117 	ldw	r2,4(r17)
    8954:	01c00044 	movi	r7,1
    8958:	d9800804 	addi	r6,sp,32
    895c:	880b883a 	mov	r5,r17
    8960:	a009883a 	mov	r4,r20
    8964:	103ee83a 	callr	r2
    8968:	10002a1e 	bne	r2,zero,8a14 <___vfprintf_internal_r+0x430>
    896c:	84000044 	addi	r16,r16,1
    8970:	003fe706 	br	8910 <_gp+0xffff78fc>
    8974:	b5bfffc4 	addi	r22,r22,-1
    8978:	b0800003 	ldbu	r2,0(r22)
    897c:	01c00044 	movi	r7,1
    8980:	d9800804 	addi	r6,sp,32
    8984:	d8800805 	stb	r2,32(sp)
    8988:	88800117 	ldw	r2,4(r17)
    898c:	880b883a 	mov	r5,r17
    8990:	a009883a 	mov	r4,r20
    8994:	103ee83a 	callr	r2
    8998:	10001e1e 	bne	r2,zero,8a14 <___vfprintf_internal_r+0x430>
    899c:	8585c83a 	sub	r2,r16,r22
    89a0:	b5c9883a 	add	r4,r22,r23
    89a4:	e085883a 	add	r2,fp,r2
    89a8:	013ff216 	blt	zero,r4,8974 <_gp+0xffff7960>
    89ac:	1021883a 	mov	r16,r2
    89b0:	dd800d17 	ldw	r22,52(sp)
    89b4:	00004406 	br	8ac8 <___vfprintf_internal_r+0x4e4>
    89b8:	00800044 	movi	r2,1
    89bc:	1480080e 	bge	r2,r18,89e0 <___vfprintf_internal_r+0x3fc>
    89c0:	95ffffc4 	addi	r23,r18,-1
    89c4:	b80f883a 	mov	r7,r23
    89c8:	01800804 	movi	r6,32
    89cc:	880b883a 	mov	r5,r17
    89d0:	a009883a 	mov	r4,r20
    89d4:	00085780 	call	8578 <print_repeat>
    89d8:	10000e1e 	bne	r2,zero,8a14 <___vfprintf_internal_r+0x430>
    89dc:	85e1883a 	add	r16,r16,r23
    89e0:	b0800017 	ldw	r2,0(r22)
    89e4:	01c00044 	movi	r7,1
    89e8:	d80d883a 	mov	r6,sp
    89ec:	d8800005 	stb	r2,0(sp)
    89f0:	88800117 	ldw	r2,4(r17)
    89f4:	880b883a 	mov	r5,r17
    89f8:	a009883a 	mov	r4,r20
    89fc:	b5c00104 	addi	r23,r22,4
    8a00:	103ee83a 	callr	r2
    8a04:	1000031e 	bne	r2,zero,8a14 <___vfprintf_internal_r+0x430>
    8a08:	84000044 	addi	r16,r16,1
    8a0c:	b82d883a 	mov	r22,r23
    8a10:	00002d06 	br	8ac8 <___vfprintf_internal_r+0x4e4>
    8a14:	00bfffc4 	movi	r2,-1
    8a18:	00003106 	br	8ae0 <___vfprintf_internal_r+0x4fc>
    8a1c:	b5c00017 	ldw	r23,0(r22)
    8a20:	b7000104 	addi	fp,r22,4
    8a24:	b809883a 	mov	r4,r23
    8a28:	000855c0 	call	855c <strlen>
    8a2c:	9091c83a 	sub	r8,r18,r2
    8a30:	102d883a 	mov	r22,r2
    8a34:	0200090e 	bge	zero,r8,8a5c <___vfprintf_internal_r+0x478>
    8a38:	400f883a 	mov	r7,r8
    8a3c:	01800804 	movi	r6,32
    8a40:	880b883a 	mov	r5,r17
    8a44:	a009883a 	mov	r4,r20
    8a48:	da001015 	stw	r8,64(sp)
    8a4c:	00085780 	call	8578 <print_repeat>
    8a50:	da001017 	ldw	r8,64(sp)
    8a54:	103fef1e 	bne	r2,zero,8a14 <_gp+0xffff7a00>
    8a58:	8221883a 	add	r16,r16,r8
    8a5c:	88800117 	ldw	r2,4(r17)
    8a60:	b00f883a 	mov	r7,r22
    8a64:	b80d883a 	mov	r6,r23
    8a68:	880b883a 	mov	r5,r17
    8a6c:	a009883a 	mov	r4,r20
    8a70:	103ee83a 	callr	r2
    8a74:	103fe71e 	bne	r2,zero,8a14 <_gp+0xffff7a00>
    8a78:	85a1883a 	add	r16,r16,r22
    8a7c:	e02d883a 	mov	r22,fp
    8a80:	00001106 	br	8ac8 <___vfprintf_internal_r+0x4e4>
    8a84:	00c00044 	movi	r3,1
    8a88:	04ffffc4 	movi	r19,-1
    8a8c:	d8000e15 	stw	zero,56(sp)
    8a90:	d8c00a15 	stw	r3,40(sp)
    8a94:	05400284 	movi	r21,10
    8a98:	9825883a 	mov	r18,r19
    8a9c:	d8000c15 	stw	zero,48(sp)
    8aa0:	d8000b15 	stw	zero,44(sp)
    8aa4:	182f883a 	mov	r23,r3
    8aa8:	00000806 	br	8acc <___vfprintf_internal_r+0x4e8>
    8aac:	ddc00b15 	stw	r23,44(sp)
    8ab0:	05c00084 	movi	r23,2
    8ab4:	00000506 	br	8acc <___vfprintf_internal_r+0x4e8>
    8ab8:	00c00044 	movi	r3,1
    8abc:	d8c00c15 	stw	r3,48(sp)
    8ac0:	05c000c4 	movi	r23,3
    8ac4:	00000106 	br	8acc <___vfprintf_internal_r+0x4e8>
    8ac8:	002f883a 	mov	r23,zero
    8acc:	d8c00f17 	ldw	r3,60(sp)
    8ad0:	18c00044 	addi	r3,r3,1
    8ad4:	d8c00f15 	stw	r3,60(sp)
    8ad8:	003edc06 	br	864c <_gp+0xffff7638>
    8adc:	8005883a 	mov	r2,r16
    8ae0:	dfc01a17 	ldw	ra,104(sp)
    8ae4:	df001917 	ldw	fp,100(sp)
    8ae8:	ddc01817 	ldw	r23,96(sp)
    8aec:	dd801717 	ldw	r22,92(sp)
    8af0:	dd401617 	ldw	r21,88(sp)
    8af4:	dd001517 	ldw	r20,84(sp)
    8af8:	dcc01417 	ldw	r19,80(sp)
    8afc:	dc801317 	ldw	r18,76(sp)
    8b00:	dc401217 	ldw	r17,72(sp)
    8b04:	dc001117 	ldw	r16,68(sp)
    8b08:	dec01b04 	addi	sp,sp,108
    8b0c:	f800283a 	ret

00008b10 <__vfprintf_internal>:
    8b10:	00800074 	movhi	r2,1
    8b14:	10a40604 	addi	r2,r2,-28648
    8b18:	300f883a 	mov	r7,r6
    8b1c:	280d883a 	mov	r6,r5
    8b20:	200b883a 	mov	r5,r4
    8b24:	11000017 	ldw	r4,0(r2)
    8b28:	00085e41 	jmpi	85e4 <___vfprintf_internal_r>

00008b2c <__sfvwrite_small_dev>:
    8b2c:	2880000b 	ldhu	r2,0(r5)
    8b30:	1080020c 	andi	r2,r2,8
    8b34:	10002126 	beq	r2,zero,8bbc <__sfvwrite_small_dev+0x90>
    8b38:	2880008f 	ldh	r2,2(r5)
    8b3c:	defffa04 	addi	sp,sp,-24
    8b40:	dc000015 	stw	r16,0(sp)
    8b44:	dfc00515 	stw	ra,20(sp)
    8b48:	dd000415 	stw	r20,16(sp)
    8b4c:	dcc00315 	stw	r19,12(sp)
    8b50:	dc800215 	stw	r18,8(sp)
    8b54:	dc400115 	stw	r17,4(sp)
    8b58:	2821883a 	mov	r16,r5
    8b5c:	10001216 	blt	r2,zero,8ba8 <__sfvwrite_small_dev+0x7c>
    8b60:	2027883a 	mov	r19,r4
    8b64:	3025883a 	mov	r18,r6
    8b68:	3823883a 	mov	r17,r7
    8b6c:	05010004 	movi	r20,1024
    8b70:	04400b0e 	bge	zero,r17,8ba0 <__sfvwrite_small_dev+0x74>
    8b74:	880f883a 	mov	r7,r17
    8b78:	a440010e 	bge	r20,r17,8b80 <__sfvwrite_small_dev+0x54>
    8b7c:	01c10004 	movi	r7,1024
    8b80:	8140008f 	ldh	r5,2(r16)
    8b84:	900d883a 	mov	r6,r18
    8b88:	9809883a 	mov	r4,r19
    8b8c:	0008be40 	call	8be4 <_write_r>
    8b90:	0080050e 	bge	zero,r2,8ba8 <__sfvwrite_small_dev+0x7c>
    8b94:	88a3c83a 	sub	r17,r17,r2
    8b98:	90a5883a 	add	r18,r18,r2
    8b9c:	003ff406 	br	8b70 <_gp+0xffff7b5c>
    8ba0:	0005883a 	mov	r2,zero
    8ba4:	00000706 	br	8bc4 <__sfvwrite_small_dev+0x98>
    8ba8:	8080000b 	ldhu	r2,0(r16)
    8bac:	10801014 	ori	r2,r2,64
    8bb0:	8080000d 	sth	r2,0(r16)
    8bb4:	00bfffc4 	movi	r2,-1
    8bb8:	00000206 	br	8bc4 <__sfvwrite_small_dev+0x98>
    8bbc:	00bfffc4 	movi	r2,-1
    8bc0:	f800283a 	ret
    8bc4:	dfc00517 	ldw	ra,20(sp)
    8bc8:	dd000417 	ldw	r20,16(sp)
    8bcc:	dcc00317 	ldw	r19,12(sp)
    8bd0:	dc800217 	ldw	r18,8(sp)
    8bd4:	dc400117 	ldw	r17,4(sp)
    8bd8:	dc000017 	ldw	r16,0(sp)
    8bdc:	dec00604 	addi	sp,sp,24
    8be0:	f800283a 	ret

00008be4 <_write_r>:
    8be4:	defffd04 	addi	sp,sp,-12
    8be8:	dc000015 	stw	r16,0(sp)
    8bec:	04000074 	movhi	r16,1
    8bf0:	dc400115 	stw	r17,4(sp)
    8bf4:	84244504 	addi	r16,r16,-28396
    8bf8:	2023883a 	mov	r17,r4
    8bfc:	2809883a 	mov	r4,r5
    8c00:	300b883a 	mov	r5,r6
    8c04:	380d883a 	mov	r6,r7
    8c08:	dfc00215 	stw	ra,8(sp)
    8c0c:	80000015 	stw	zero,0(r16)
    8c10:	0008d740 	call	8d74 <write>
    8c14:	00ffffc4 	movi	r3,-1
    8c18:	10c0031e 	bne	r2,r3,8c28 <_write_r+0x44>
    8c1c:	80c00017 	ldw	r3,0(r16)
    8c20:	18000126 	beq	r3,zero,8c28 <_write_r+0x44>
    8c24:	88c00015 	stw	r3,0(r17)
    8c28:	dfc00217 	ldw	ra,8(sp)
    8c2c:	dc400117 	ldw	r17,4(sp)
    8c30:	dc000017 	ldw	r16,0(sp)
    8c34:	dec00304 	addi	sp,sp,12
    8c38:	f800283a 	ret

00008c3c <__mulsi3>:
    8c3c:	0005883a 	mov	r2,zero
    8c40:	20000726 	beq	r4,zero,8c60 <__mulsi3+0x24>
    8c44:	20c0004c 	andi	r3,r4,1
    8c48:	2008d07a 	srli	r4,r4,1
    8c4c:	18000126 	beq	r3,zero,8c54 <__mulsi3+0x18>
    8c50:	1145883a 	add	r2,r2,r5
    8c54:	294b883a 	add	r5,r5,r5
    8c58:	203ffa1e 	bne	r4,zero,8c44 <_gp+0xffff7c30>
    8c5c:	f800283a 	ret
    8c60:	f800283a 	ret

00008c64 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8c64:	deffff04 	addi	sp,sp,-4
    8c68:	01000074 	movhi	r4,1
    8c6c:	01400074 	movhi	r5,1
    8c70:	dfc00015 	stw	ra,0(sp)
    8c74:	2123cd04 	addi	r4,r4,-28876
    8c78:	29640904 	addi	r5,r5,-28636

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8c7c:	2140061e 	bne	r4,r5,8c98 <alt_load+0x34>
    8c80:	01000074 	movhi	r4,1
    8c84:	01400074 	movhi	r5,1
    8c88:	21200804 	addi	r4,r4,-32736
    8c8c:	29600804 	addi	r5,r5,-32736
    8c90:	2140121e 	bne	r4,r5,8cdc <alt_load+0x78>
    8c94:	00000b06 	br	8cc4 <alt_load+0x60>
    8c98:	00c00074 	movhi	r3,1
    8c9c:	18e40904 	addi	r3,r3,-28636
    8ca0:	1907c83a 	sub	r3,r3,r4
    8ca4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8ca8:	10fff526 	beq	r2,r3,8c80 <_gp+0xffff7c6c>
    {
      *to++ = *from++;
    8cac:	114f883a 	add	r7,r2,r5
    8cb0:	39c00017 	ldw	r7,0(r7)
    8cb4:	110d883a 	add	r6,r2,r4
    8cb8:	10800104 	addi	r2,r2,4
    8cbc:	31c00015 	stw	r7,0(r6)
    8cc0:	003ff906 	br	8ca8 <_gp+0xffff7c94>
    8cc4:	01000074 	movhi	r4,1
    8cc8:	01400074 	movhi	r5,1
    8ccc:	2123b104 	addi	r4,r4,-28988
    8cd0:	2963b104 	addi	r5,r5,-28988

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8cd4:	2140101e 	bne	r4,r5,8d18 <alt_load+0xb4>
    8cd8:	00000b06 	br	8d08 <alt_load+0xa4>
    8cdc:	00c00074 	movhi	r3,1
    8ce0:	18e00804 	addi	r3,r3,-32736
    8ce4:	1907c83a 	sub	r3,r3,r4
    8ce8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8cec:	10fff526 	beq	r2,r3,8cc4 <_gp+0xffff7cb0>
    {
      *to++ = *from++;
    8cf0:	114f883a 	add	r7,r2,r5
    8cf4:	39c00017 	ldw	r7,0(r7)
    8cf8:	110d883a 	add	r6,r2,r4
    8cfc:	10800104 	addi	r2,r2,4
    8d00:	31c00015 	stw	r7,0(r6)
    8d04:	003ff906 	br	8cec <_gp+0xffff7cd8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8d08:	0008eb40 	call	8eb4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8d0c:	dfc00017 	ldw	ra,0(sp)
    8d10:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8d14:	0008eb81 	jmpi	8eb8 <alt_icache_flush_all>
    8d18:	00c00074 	movhi	r3,1
    8d1c:	18e3cd04 	addi	r3,r3,-28876
    8d20:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8d24:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8d28:	18bff726 	beq	r3,r2,8d08 <_gp+0xffff7cf4>
    {
      *to++ = *from++;
    8d2c:	114f883a 	add	r7,r2,r5
    8d30:	39c00017 	ldw	r7,0(r7)
    8d34:	110d883a 	add	r6,r2,r4
    8d38:	10800104 	addi	r2,r2,4
    8d3c:	31c00015 	stw	r7,0(r6)
    8d40:	003ff906 	br	8d28 <_gp+0xffff7d14>

00008d44 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8d44:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8d48:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8d4c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8d50:	0008dd40 	call	8dd4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8d54:	0008df40 	call	8df4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8d58:	d1a04117 	ldw	r6,-32508(gp)
    8d5c:	d1604217 	ldw	r5,-32504(gp)
    8d60:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8d64:	dfc00017 	ldw	ra,0(sp)
    8d68:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8d6c:	000805c1 	jmpi	805c <main>

00008d70 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    8d70:	0008e2c1 	jmpi	8e2c <alt_busy_sleep>

00008d74 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8d74:	00800044 	movi	r2,1
    8d78:	20800226 	beq	r4,r2,8d84 <write+0x10>
    8d7c:	00800084 	movi	r2,2
    8d80:	2080041e 	bne	r4,r2,8d94 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8d84:	01000074 	movhi	r4,1
    8d88:	000f883a 	mov	r7,zero
    8d8c:	21240704 	addi	r4,r4,-28644
    8d90:	0008df81 	jmpi	8df8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8d94:	d0a00317 	ldw	r2,-32756(gp)
    8d98:	10000926 	beq	r2,zero,8dc0 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8d9c:	deffff04 	addi	sp,sp,-4
    8da0:	dfc00015 	stw	ra,0(sp)
    8da4:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8da8:	00c01444 	movi	r3,81
    8dac:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8db0:	00bfffc4 	movi	r2,-1
    8db4:	dfc00017 	ldw	ra,0(sp)
    8db8:	dec00104 	addi	sp,sp,4
    8dbc:	f800283a 	ret
    8dc0:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8dc4:	00c01444 	movi	r3,81
    8dc8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8dcc:	00bfffc4 	movi	r2,-1
    8dd0:	f800283a 	ret

00008dd4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8dd4:	deffff04 	addi	sp,sp,-4
    8dd8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8ddc:	0008ebc0 	call	8ebc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8de0:	00800044 	movi	r2,1
    8de4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8de8:	dfc00017 	ldw	ra,0(sp)
    8dec:	dec00104 	addi	sp,sp,4
    8df0:	f800283a 	ret

00008df4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8df4:	f800283a 	ret

00008df8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8df8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8dfc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8e00:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8e04:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8e08:	2980072e 	bgeu	r5,r6,8e28 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8e0c:	38c00037 	ldwio	r3,0(r7)
    8e10:	18ffffec 	andhi	r3,r3,65535
    8e14:	183ffc26 	beq	r3,zero,8e08 <_gp+0xffff7df4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8e18:	28c00007 	ldb	r3,0(r5)
    8e1c:	20c00035 	stwio	r3,0(r4)
    8e20:	29400044 	addi	r5,r5,1
    8e24:	003ff806 	br	8e08 <_gp+0xffff7df4>

  return count;
}
    8e28:	f800283a 	ret

00008e2c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8e2c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8e30:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8e34:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8e38:	dc000015 	stw	r16,0(sp)
    8e3c:	dfc00115 	stw	ra,4(sp)
    8e40:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8e44:	000835c0 	call	835c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8e48:	10001026 	beq	r2,zero,8e8c <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8e4c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8e50:	013999b4 	movhi	r4,58982
    8e54:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8e58:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8e5c:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8e60:	297fffc4 	addi	r5,r5,-1
    8e64:	283ffe1e 	bne	r5,zero,8e60 <_gp+0xffff7e4c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8e68:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8e6c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8e70:	18bffb16 	blt	r3,r2,8e60 <_gp+0xffff7e4c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8e74:	01400144 	movi	r5,5
    8e78:	8009883a 	mov	r4,r16
    8e7c:	0008c3c0 	call	8c3c <__mulsi3>
    8e80:	10bfffc4 	addi	r2,r2,-1
    8e84:	103ffe1e 	bne	r2,zero,8e80 <_gp+0xffff7e6c>
    8e88:	00000506 	br	8ea0 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8e8c:	01400144 	movi	r5,5
    8e90:	8009883a 	mov	r4,r16
    8e94:	0008c3c0 	call	8c3c <__mulsi3>
    8e98:	10bfffc4 	addi	r2,r2,-1
    8e9c:	00bffe16 	blt	zero,r2,8e98 <_gp+0xffff7e84>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    8ea0:	0005883a 	mov	r2,zero
    8ea4:	dfc00117 	ldw	ra,4(sp)
    8ea8:	dc000017 	ldw	r16,0(sp)
    8eac:	dec00204 	addi	sp,sp,8
    8eb0:	f800283a 	ret

00008eb4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8eb4:	f800283a 	ret

00008eb8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8eb8:	f800283a 	ret

00008ebc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8ebc:	000170fa 	wrctl	ienable,zero
    8ec0:	f800283a 	ret
