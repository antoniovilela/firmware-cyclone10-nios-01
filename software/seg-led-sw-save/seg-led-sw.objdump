
seg-led-sw.elf:     file format elf32-littlenios2
seg-led-sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000006dc memsz 0x000006dc flags r-x
    LOAD off    0x000016fc vaddr 0x000016fc paddr 0x00001700 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001704 vaddr 0x00001704 paddr 0x00001704 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001700  2**0
                  CONTENTS
  2 .text         000006a0  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  000016c0  000016c0  000016c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000016fc  00001700  000016fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00001704  00001704  00001704  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001710  00001710  00001700  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000228  00000000  00000000  00001728  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000143d  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ac0  00000000  00000000  00002d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000c8d  00000000  00000000  0000384d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002ac  00000000  00000000  000044dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000008e0  00000000  00000000  00004788  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000093e  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000059a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  000059e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000069e6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000069e9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000069f5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000069f6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000069f7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00006a02  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00006a0d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00006a18  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000005c  00000000  00000000  00006a21  2**0
                  CONTENTS, READONLY
 26 .jdi          0000501c  00000000  00000000  00006a7d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00045d9a  00000000  00000000  0000ba99  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
000016c0 l    d  .rodata	00000000 .rodata
000016fc l    d  .rwdata	00000000 .rwdata
00001704 l    d  .bss	00000000 .bss
00001710 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../seg-led-sw_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 seg_led_sw.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-mul.c
000014dc g     F .text	0000002c alt_main
00001700 g       *ABS*	00000000 __flash_rwdata_start
00001550 g     F .text	00000038 alt_putstr
00001674 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001708 g     O .bss	00000004 alt_argv
000096fc g       *ABS*	00000000 _gp
00001588 g     F .text	00000004 usleep
000013d4 g     F .text	00000028 memcpy
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001318 g     F .text	00000064 .hidden __udivsi3
00001710 g       *ABS*	00000000 __bss_end
0000166c g     F .text	00000004 alt_dcache_flush_all
00001700 g       *ABS*	00000000 __ram_rwdata_end
000016fc g       *ABS*	00000000 __ram_rodata_end
000016fc g     O .rwdata	00000004 jtag_uart_0
0000137c g     F .text	00000058 .hidden __umodsi3
00001710 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000015b0 g     F .text	00000034 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
000015ac g     F .text	00000004 alt_sys_init
00001698 g     F .text	00000028 .hidden __mulsi3
000016fc g       *ABS*	00000000 __ram_rwdata_start
000016c0 g       *ABS*	00000000 __ram_rodata_start
000015e4 g     F .text	00000088 alt_busy_sleep
00001710 g       *ABS*	00000000 __alt_stack_base
00001704 g       *ABS*	00000000 __bss_start
0000105c g     F .text	000001c4 main
00001704 g     O .bss	00000004 alt_envp
00001220 g     F .text	00000084 .hidden __divsi3
000016c0 g       *ABS*	00000000 __flash_rodata_start
0000158c g     F .text	00000020 alt_irq_init
0000170c g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001700 g       *ABS*	00000000 _edata
00001710 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
000012a4 g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
0000167c g     F .text	0000001c strlen
00001508 g     F .text	00000048 alt_putchar
00001670 g     F .text	00000004 alt_icache_flush_all
000013fc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a5bf14 	ori	gp,gp,38652
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1085c114 	ori	r2,r2,5892

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c5c414 	ori	r3,r3,5904

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7948>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00013fc0 	call	13fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00014dc0 	call	14dc <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff795c>

0000105c <main>:
   LED_BASE [1:0]
   SEG_EN_BASE [2:0]
   SEG_BASE [7:0]
   SW_BASE
   */
  alt_putstr("Starting.\n");
    105c:	01000034 	movhi	r4,0

#define read(base) IORD_ALTERA_AVALON_PIO_DATA(base)
#define write(base, data) IOWR_ALTERA_AVALON_PIO_DATA(base, data)

int main()
{ 
    1060:	defff404 	addi	sp,sp,-48
   LED_BASE [1:0]
   SEG_EN_BASE [2:0]
   SEG_BASE [7:0]
   SW_BASE
   */
  alt_putstr("Starting.\n");
    1064:	2105b004 	addi	r4,r4,5824

#define read(base) IORD_ALTERA_AVALON_PIO_DATA(base)
#define write(base, data) IOWR_ALTERA_AVALON_PIO_DATA(base, data)

int main()
{ 
    1068:	dfc00b15 	stw	ra,44(sp)
    106c:	dd800a15 	stw	r22,40(sp)
    1070:	dd400915 	stw	r21,36(sp)
    1074:	dd000815 	stw	r20,32(sp)
    1078:	dcc00715 	stw	r19,28(sp)
    107c:	dc800615 	stw	r18,24(sp)
    1080:	dc400515 	stw	r17,20(sp)
    1084:	dc000415 	stw	r16,16(sp)
   LED_BASE [1:0]
   SEG_EN_BASE [2:0]
   SEG_BASE [7:0]
   SW_BASE
   */
  alt_putstr("Starting.\n");
    1088:	00015500 	call	1550 <alt_putstr>

  char seg_decode[16] = {
    108c:	01400034 	movhi	r5,0
    1090:	01800404 	movi	r6,16
    1094:	2945bb04 	addi	r5,r5,5868
    1098:	d809883a 	mov	r4,sp
    109c:	00013d40 	call	13d4 <memcpy>
	 0x79,
	 0x71
  };

  char dp = 0;
  write( SEG_EN_BASE, 0x7 );
    10a0:	008c1804 	movi	r2,12384
    10a4:	00c001c4 	movi	r3,7
    10a8:	10c00035 	stwio	r3,0(r2)
  write( SEG_BASE, ( ~seg_decode[0] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
    10ac:	008c1404 	movi	r2,12368
    10b0:	00c03004 	movi	r3,192
    10b4:	10c00035 	stwio	r3,0(r2)
  /* Event loop never exits. */
  unsigned int count = 0;
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
  char state = 0;
    10b8:	0005883a 	mov	r2,zero

  /* Event loop never exits. */
  unsigned int count = 0;
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
    10bc:	0025883a 	mov	r18,zero
  write( SEG_BASE, ( ~seg_decode[0] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );

  /* Event loop never exits. */
  unsigned int count = 0;
  char dig_0 = 0;
  char dig_1 = 0;
    10c0:	0027883a 	mov	r19,zero
  write( SEG_EN_BASE, 0x7 );
  write( SEG_BASE, ( ~seg_decode[0] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );

  /* Event loop never exits. */
  unsigned int count = 0;
  char dig_0 = 0;
    10c4:	0029883a 	mov	r20,zero
  char dp = 0;
  write( SEG_EN_BASE, 0x7 );
  write( SEG_BASE, ( ~seg_decode[0] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );

  /* Event loop never exits. */
  unsigned int count = 0;
    10c8:	0021883a 	mov	r16,zero
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
  char state = 0;
  while (1){
	  char sw = read( SW_BASE );
    10cc:	00cc1004 	movi	r3,12352
    10d0:	1c400037 	ldwio	r17,0(r3)
	  if ( sw != state && sw == 0 ){
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	88c03fcc 	andi	r3,r17,255
    10dc:	1080201c 	xori	r2,r2,128
    10e0:	18c0201c 	xori	r3,r3,128
    10e4:	10bfe004 	addi	r2,r2,-128
    10e8:	18ffe004 	addi	r3,r3,-128
    10ec:	10c02126 	beq	r2,r3,1174 <main+0x118>
    10f0:	1800201e 	bne	r3,zero,1174 <main+0x118>
		  alt_putstr("Switched pressed.\n");
    10f4:	01000034 	movhi	r4,0
    10f8:	2105b304 	addi	r4,r4,5836
    10fc:	00015500 	call	1550 <alt_putstr>

		  ++count;
    1100:	84000044 	addi	r16,r16,1
		  dp = 0;
		  dig_0 = ( count % 10 );
    1104:	01400284 	movi	r5,10
    1108:	8009883a 	mov	r4,r16
    110c:	000137c0 	call	137c <__umodsi3>
		  dig_1 = ( ( count % 100 ) / 10 );
    1110:	01401904 	movi	r5,100
    1114:	8009883a 	mov	r4,r16
	  if ( sw != state && sw == 0 ){
		  alt_putstr("Switched pressed.\n");

		  ++count;
		  dp = 0;
		  dig_0 = ( count % 10 );
    1118:	102b883a 	mov	r21,r2
    111c:	1029883a 	mov	r20,r2
		  dig_1 = ( ( count % 100 ) / 10 );
    1120:	000137c0 	call	137c <__umodsi3>
    1124:	01400284 	movi	r5,10
    1128:	1009883a 	mov	r4,r2
    112c:	00013180 	call	1318 <__udivsi3>
		  dig_2 = ( ( count % 1000 ) / 100 );
    1130:	0140fa04 	movi	r5,1000
    1134:	8009883a 	mov	r4,r16
		  alt_putstr("Switched pressed.\n");

		  ++count;
		  dp = 0;
		  dig_0 = ( count % 10 );
		  dig_1 = ( ( count % 100 ) / 10 );
    1138:	1027883a 	mov	r19,r2
		  dig_2 = ( ( count % 1000 ) / 100 );
    113c:	000137c0 	call	137c <__umodsi3>
    1140:	01401904 	movi	r5,100
    1144:	1009883a 	mov	r4,r2
    1148:	00013180 	call	1318 <__udivsi3>

		  alt_putstr( "Count: " ); alt_putchar( (char)(dig_0+48) ); alt_putstr( "\n" );
    114c:	01000034 	movhi	r4,0
    1150:	2105b804 	addi	r4,r4,5856

		  ++count;
		  dp = 0;
		  dig_0 = ( count % 10 );
		  dig_1 = ( ( count % 100 ) / 10 );
		  dig_2 = ( ( count % 1000 ) / 100 );
    1154:	1025883a 	mov	r18,r2

		  alt_putstr( "Count: " ); alt_putchar( (char)(dig_0+48) ); alt_putstr( "\n" );
    1158:	00015500 	call	1550 <alt_putstr>
    115c:	a9000c04 	addi	r4,r21,48
    1160:	21003fcc 	andi	r4,r4,255
    1164:	00015080 	call	1508 <alt_putchar>
    1168:	01000034 	movhi	r4,0
    116c:	2105ba04 	addi	r4,r4,5864
    1170:	00015500 	call	1550 <alt_putstr>
		  //printf ( "Digit 1: %c\n", dig_1 );
		  //printf ( "Digit 2: %c\n", dig_2 );
	  }
	  state = sw;

	  write( SEG_EN_BASE, 0x4 );
    1174:	058c1804 	movi	r22,12384
    1178:	00800104 	movi	r2,4
    117c:	b0800035 	stwio	r2,0(r22)
	  write( SEG_BASE, ( ~seg_decode[ dig_0 ] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
    1180:	a0803fcc 	andi	r2,r20,255
    1184:	1080201c 	xori	r2,r2,128
    1188:	10bfe004 	addi	r2,r2,-128
    118c:	d885883a 	add	r2,sp,r2
    1190:	10800007 	ldb	r2,0(r2)
    1194:	054c1404 	movi	r21,12368
    1198:	0084303a 	nor	r2,zero,r2
    119c:	10801fcc 	andi	r2,r2,127
    11a0:	10802014 	ori	r2,r2,128
    11a4:	a8800035 	stwio	r2,0(r21)
	  usleep( 100 );
    11a8:	01001904 	movi	r4,100
    11ac:	00015880 	call	1588 <usleep>

	  write( SEG_EN_BASE, 0x2 );
    11b0:	00800084 	movi	r2,2
    11b4:	b0800035 	stwio	r2,0(r22)
	  write( SEG_BASE, ( ~seg_decode[ dig_1 ] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
    11b8:	98803fcc 	andi	r2,r19,255
    11bc:	1080201c 	xori	r2,r2,128
    11c0:	10bfe004 	addi	r2,r2,-128
    11c4:	d885883a 	add	r2,sp,r2
    11c8:	10800007 	ldb	r2,0(r2)
    11cc:	0084303a 	nor	r2,zero,r2
    11d0:	10801fcc 	andi	r2,r2,127
    11d4:	10802014 	ori	r2,r2,128
    11d8:	a8800035 	stwio	r2,0(r21)
	  usleep( 100 );
    11dc:	01001904 	movi	r4,100
    11e0:	00015880 	call	1588 <usleep>

	  write( SEG_EN_BASE, 0x1 );
    11e4:	00800044 	movi	r2,1
    11e8:	b0800035 	stwio	r2,0(r22)
	  write( SEG_BASE, ( ~seg_decode[ dig_2 ] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
    11ec:	90803fcc 	andi	r2,r18,255
    11f0:	1080201c 	xori	r2,r2,128
    11f4:	10bfe004 	addi	r2,r2,-128
    11f8:	d885883a 	add	r2,sp,r2
    11fc:	10800007 	ldb	r2,0(r2)
    1200:	0084303a 	nor	r2,zero,r2
    1204:	10801fcc 	andi	r2,r2,127
    1208:	10802014 	ori	r2,r2,128
    120c:	a8800035 	stwio	r2,0(r21)
	  usleep( 100 );
    1210:	01001904 	movi	r4,100
    1214:	00015880 	call	1588 <usleep>
  char dig_0 = 0;
  char dig_1 = 0;
  char dig_2 = 0;
  char state = 0;
  while (1){
	  char sw = read( SW_BASE );
    1218:	8805883a 	mov	r2,r17
	  usleep( 100 );

	  write( SEG_EN_BASE, 0x1 );
	  write( SEG_BASE, ( ~seg_decode[ dig_2 ] & 0x7F ) | ( ( ~dp & 0x1 )  << 7 ) );
	  usleep( 100 );
  }
    121c:	003fab06 	br	10cc <_gp+0xffff79d0>

00001220 <__divsi3>:
    1220:	20001b16 	blt	r4,zero,1290 <__divsi3+0x70>
    1224:	000f883a 	mov	r7,zero
    1228:	28001616 	blt	r5,zero,1284 <__divsi3+0x64>
    122c:	200d883a 	mov	r6,r4
    1230:	29001a2e 	bgeu	r5,r4,129c <__divsi3+0x7c>
    1234:	00800804 	movi	r2,32
    1238:	00c00044 	movi	r3,1
    123c:	00000106 	br	1244 <__divsi3+0x24>
    1240:	10000d26 	beq	r2,zero,1278 <__divsi3+0x58>
    1244:	294b883a 	add	r5,r5,r5
    1248:	10bfffc4 	addi	r2,r2,-1
    124c:	18c7883a 	add	r3,r3,r3
    1250:	293ffb36 	bltu	r5,r4,1240 <_gp+0xffff7b44>
    1254:	0005883a 	mov	r2,zero
    1258:	18000726 	beq	r3,zero,1278 <__divsi3+0x58>
    125c:	0005883a 	mov	r2,zero
    1260:	31400236 	bltu	r6,r5,126c <__divsi3+0x4c>
    1264:	314dc83a 	sub	r6,r6,r5
    1268:	10c4b03a 	or	r2,r2,r3
    126c:	1806d07a 	srli	r3,r3,1
    1270:	280ad07a 	srli	r5,r5,1
    1274:	183ffa1e 	bne	r3,zero,1260 <_gp+0xffff7b64>
    1278:	38000126 	beq	r7,zero,1280 <__divsi3+0x60>
    127c:	0085c83a 	sub	r2,zero,r2
    1280:	f800283a 	ret
    1284:	014bc83a 	sub	r5,zero,r5
    1288:	39c0005c 	xori	r7,r7,1
    128c:	003fe706 	br	122c <_gp+0xffff7b30>
    1290:	0109c83a 	sub	r4,zero,r4
    1294:	01c00044 	movi	r7,1
    1298:	003fe306 	br	1228 <_gp+0xffff7b2c>
    129c:	00c00044 	movi	r3,1
    12a0:	003fee06 	br	125c <_gp+0xffff7b60>

000012a4 <__modsi3>:
    12a4:	20001716 	blt	r4,zero,1304 <__modsi3+0x60>
    12a8:	000f883a 	mov	r7,zero
    12ac:	2005883a 	mov	r2,r4
    12b0:	28001216 	blt	r5,zero,12fc <__modsi3+0x58>
    12b4:	2900162e 	bgeu	r5,r4,1310 <__modsi3+0x6c>
    12b8:	01800804 	movi	r6,32
    12bc:	00c00044 	movi	r3,1
    12c0:	00000106 	br	12c8 <__modsi3+0x24>
    12c4:	30000a26 	beq	r6,zero,12f0 <__modsi3+0x4c>
    12c8:	294b883a 	add	r5,r5,r5
    12cc:	31bfffc4 	addi	r6,r6,-1
    12d0:	18c7883a 	add	r3,r3,r3
    12d4:	293ffb36 	bltu	r5,r4,12c4 <_gp+0xffff7bc8>
    12d8:	18000526 	beq	r3,zero,12f0 <__modsi3+0x4c>
    12dc:	1806d07a 	srli	r3,r3,1
    12e0:	11400136 	bltu	r2,r5,12e8 <__modsi3+0x44>
    12e4:	1145c83a 	sub	r2,r2,r5
    12e8:	280ad07a 	srli	r5,r5,1
    12ec:	183ffb1e 	bne	r3,zero,12dc <_gp+0xffff7be0>
    12f0:	38000126 	beq	r7,zero,12f8 <__modsi3+0x54>
    12f4:	0085c83a 	sub	r2,zero,r2
    12f8:	f800283a 	ret
    12fc:	014bc83a 	sub	r5,zero,r5
    1300:	003fec06 	br	12b4 <_gp+0xffff7bb8>
    1304:	0109c83a 	sub	r4,zero,r4
    1308:	01c00044 	movi	r7,1
    130c:	003fe706 	br	12ac <_gp+0xffff7bb0>
    1310:	00c00044 	movi	r3,1
    1314:	003ff106 	br	12dc <_gp+0xffff7be0>

00001318 <__udivsi3>:
    1318:	200d883a 	mov	r6,r4
    131c:	2900152e 	bgeu	r5,r4,1374 <__udivsi3+0x5c>
    1320:	28001416 	blt	r5,zero,1374 <__udivsi3+0x5c>
    1324:	00800804 	movi	r2,32
    1328:	00c00044 	movi	r3,1
    132c:	00000206 	br	1338 <__udivsi3+0x20>
    1330:	10000e26 	beq	r2,zero,136c <__udivsi3+0x54>
    1334:	28000516 	blt	r5,zero,134c <__udivsi3+0x34>
    1338:	294b883a 	add	r5,r5,r5
    133c:	10bfffc4 	addi	r2,r2,-1
    1340:	18c7883a 	add	r3,r3,r3
    1344:	293ffa36 	bltu	r5,r4,1330 <_gp+0xffff7c34>
    1348:	18000826 	beq	r3,zero,136c <__udivsi3+0x54>
    134c:	0005883a 	mov	r2,zero
    1350:	31400236 	bltu	r6,r5,135c <__udivsi3+0x44>
    1354:	314dc83a 	sub	r6,r6,r5
    1358:	10c4b03a 	or	r2,r2,r3
    135c:	1806d07a 	srli	r3,r3,1
    1360:	280ad07a 	srli	r5,r5,1
    1364:	183ffa1e 	bne	r3,zero,1350 <_gp+0xffff7c54>
    1368:	f800283a 	ret
    136c:	0005883a 	mov	r2,zero
    1370:	f800283a 	ret
    1374:	00c00044 	movi	r3,1
    1378:	003ff406 	br	134c <_gp+0xffff7c50>

0000137c <__umodsi3>:
    137c:	2005883a 	mov	r2,r4
    1380:	2900122e 	bgeu	r5,r4,13cc <__umodsi3+0x50>
    1384:	28001116 	blt	r5,zero,13cc <__umodsi3+0x50>
    1388:	01800804 	movi	r6,32
    138c:	00c00044 	movi	r3,1
    1390:	00000206 	br	139c <__umodsi3+0x20>
    1394:	30000c26 	beq	r6,zero,13c8 <__umodsi3+0x4c>
    1398:	28000516 	blt	r5,zero,13b0 <__umodsi3+0x34>
    139c:	294b883a 	add	r5,r5,r5
    13a0:	31bfffc4 	addi	r6,r6,-1
    13a4:	18c7883a 	add	r3,r3,r3
    13a8:	293ffa36 	bltu	r5,r4,1394 <_gp+0xffff7c98>
    13ac:	18000626 	beq	r3,zero,13c8 <__umodsi3+0x4c>
    13b0:	1806d07a 	srli	r3,r3,1
    13b4:	11400136 	bltu	r2,r5,13bc <__umodsi3+0x40>
    13b8:	1145c83a 	sub	r2,r2,r5
    13bc:	280ad07a 	srli	r5,r5,1
    13c0:	183ffb1e 	bne	r3,zero,13b0 <_gp+0xffff7cb4>
    13c4:	f800283a 	ret
    13c8:	f800283a 	ret
    13cc:	00c00044 	movi	r3,1
    13d0:	003ff706 	br	13b0 <_gp+0xffff7cb4>

000013d4 <memcpy>:
    13d4:	2005883a 	mov	r2,r4
    13d8:	2007883a 	mov	r3,r4
    13dc:	218d883a 	add	r6,r4,r6
    13e0:	19800526 	beq	r3,r6,13f8 <memcpy+0x24>
    13e4:	29000003 	ldbu	r4,0(r5)
    13e8:	18c00044 	addi	r3,r3,1
    13ec:	29400044 	addi	r5,r5,1
    13f0:	193fffc5 	stb	r4,-1(r3)
    13f4:	003ffa06 	br	13e0 <_gp+0xffff7ce4>
    13f8:	f800283a 	ret

000013fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    13fc:	deffff04 	addi	sp,sp,-4
    1400:	01000034 	movhi	r4,0
    1404:	01400034 	movhi	r5,0
    1408:	dfc00015 	stw	ra,0(sp)
    140c:	2105bf04 	addi	r4,r4,5884
    1410:	2945c004 	addi	r5,r5,5888

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1414:	2140061e 	bne	r4,r5,1430 <alt_load+0x34>
    1418:	01000034 	movhi	r4,0
    141c:	01400034 	movhi	r5,0
    1420:	21040804 	addi	r4,r4,4128
    1424:	29440804 	addi	r5,r5,4128
    1428:	2140121e 	bne	r4,r5,1474 <alt_load+0x78>
    142c:	00000b06 	br	145c <alt_load+0x60>
    1430:	00c00034 	movhi	r3,0
    1434:	18c5c004 	addi	r3,r3,5888
    1438:	1907c83a 	sub	r3,r3,r4
    143c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1440:	10fff526 	beq	r2,r3,1418 <_gp+0xffff7d1c>
    {
      *to++ = *from++;
    1444:	114f883a 	add	r7,r2,r5
    1448:	39c00017 	ldw	r7,0(r7)
    144c:	110d883a 	add	r6,r2,r4
    1450:	10800104 	addi	r2,r2,4
    1454:	31c00015 	stw	r7,0(r6)
    1458:	003ff906 	br	1440 <_gp+0xffff7d44>
    145c:	01000034 	movhi	r4,0
    1460:	01400034 	movhi	r5,0
    1464:	2105b004 	addi	r4,r4,5824
    1468:	2945b004 	addi	r5,r5,5824

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    146c:	2140101e 	bne	r4,r5,14b0 <alt_load+0xb4>
    1470:	00000b06 	br	14a0 <alt_load+0xa4>
    1474:	00c00034 	movhi	r3,0
    1478:	18c40804 	addi	r3,r3,4128
    147c:	1907c83a 	sub	r3,r3,r4
    1480:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1484:	10fff526 	beq	r2,r3,145c <_gp+0xffff7d60>
    {
      *to++ = *from++;
    1488:	114f883a 	add	r7,r2,r5
    148c:	39c00017 	ldw	r7,0(r7)
    1490:	110d883a 	add	r6,r2,r4
    1494:	10800104 	addi	r2,r2,4
    1498:	31c00015 	stw	r7,0(r6)
    149c:	003ff906 	br	1484 <_gp+0xffff7d88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    14a0:	000166c0 	call	166c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    14a4:	dfc00017 	ldw	ra,0(sp)
    14a8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    14ac:	00016701 	jmpi	1670 <alt_icache_flush_all>
    14b0:	00c00034 	movhi	r3,0
    14b4:	18c5bf04 	addi	r3,r3,5884
    14b8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    14bc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    14c0:	18bff726 	beq	r3,r2,14a0 <_gp+0xffff7da4>
    {
      *to++ = *from++;
    14c4:	114f883a 	add	r7,r2,r5
    14c8:	39c00017 	ldw	r7,0(r7)
    14cc:	110d883a 	add	r6,r2,r4
    14d0:	10800104 	addi	r2,r2,4
    14d4:	31c00015 	stw	r7,0(r6)
    14d8:	003ff906 	br	14c0 <_gp+0xffff7dc4>

000014dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    14dc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    14e0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    14e4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    14e8:	000158c0 	call	158c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    14ec:	00015ac0 	call	15ac <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    14f0:	d1a00217 	ldw	r6,-32760(gp)
    14f4:	d1600317 	ldw	r5,-32756(gp)
    14f8:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    14fc:	dfc00017 	ldw	ra,0(sp)
    1500:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1504:	000105c1 	jmpi	105c <main>

00001508 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1508:	defffd04 	addi	sp,sp,-12
    150c:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    1510:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1514:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1518:	01000034 	movhi	r4,0
    151c:	000f883a 	mov	r7,zero
    1520:	01800044 	movi	r6,1
    1524:	d80b883a 	mov	r5,sp
    1528:	2105bf04 	addi	r4,r4,5884
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    152c:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1530:	00015b00 	call	15b0 <altera_avalon_jtag_uart_write>
    1534:	00ffffc4 	movi	r3,-1
    1538:	10c00126 	beq	r2,r3,1540 <alt_putchar+0x38>
        return -1;
    }
    return c;
    153c:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    1540:	dfc00217 	ldw	ra,8(sp)
    1544:	dc000117 	ldw	r16,4(sp)
    1548:	dec00304 	addi	sp,sp,12
    154c:	f800283a 	ret

00001550 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1550:	defffe04 	addi	sp,sp,-8
    1554:	dc000015 	stw	r16,0(sp)
    1558:	dfc00115 	stw	ra,4(sp)
    155c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1560:	000167c0 	call	167c <strlen>
    1564:	01000034 	movhi	r4,0
    1568:	000f883a 	mov	r7,zero
    156c:	100d883a 	mov	r6,r2
    1570:	800b883a 	mov	r5,r16
    1574:	2105bf04 	addi	r4,r4,5884
#else
    return fputs(str, stdout);
#endif
#endif
}
    1578:	dfc00117 	ldw	ra,4(sp)
    157c:	dc000017 	ldw	r16,0(sp)
    1580:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1584:	00015b01 	jmpi	15b0 <altera_avalon_jtag_uart_write>

00001588 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    1588:	00015e41 	jmpi	15e4 <alt_busy_sleep>

0000158c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    158c:	deffff04 	addi	sp,sp,-4
    1590:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    1594:	00016740 	call	1674 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1598:	00800044 	movi	r2,1
    159c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    15a0:	dfc00017 	ldw	ra,0(sp)
    15a4:	dec00104 	addi	sp,sp,4
    15a8:	f800283a 	ret

000015ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    15ac:	f800283a 	ret

000015b0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    15b0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    15b4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    15b8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    15bc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    15c0:	2980072e 	bgeu	r5,r6,15e0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    15c4:	38c00037 	ldwio	r3,0(r7)
    15c8:	18ffffec 	andhi	r3,r3,65535
    15cc:	183ffc26 	beq	r3,zero,15c0 <_gp+0xffff7ec4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    15d0:	28c00007 	ldb	r3,0(r5)
    15d4:	20c00035 	stwio	r3,0(r4)
    15d8:	29400044 	addi	r5,r5,1
    15dc:	003ff806 	br	15c0 <_gp+0xffff7ec4>

  return count;
}
    15e0:	f800283a 	ret

000015e4 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    15e4:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    15e8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    15ec:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    15f0:	dc000015 	stw	r16,0(sp)
    15f4:	dfc00115 	stw	ra,4(sp)
    15f8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    15fc:	00013180 	call	1318 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1600:	10001026 	beq	r2,zero,1644 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1604:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1608:	013999b4 	movhi	r4,58982
    160c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1610:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1614:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1618:	297fffc4 	addi	r5,r5,-1
    161c:	283ffe1e 	bne	r5,zero,1618 <_gp+0xffff7f1c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1620:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1624:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1628:	18bffb16 	blt	r3,r2,1618 <_gp+0xffff7f1c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    162c:	01400144 	movi	r5,5
    1630:	8009883a 	mov	r4,r16
    1634:	00016980 	call	1698 <__mulsi3>
    1638:	10bfffc4 	addi	r2,r2,-1
    163c:	103ffe1e 	bne	r2,zero,1638 <_gp+0xffff7f3c>
    1640:	00000506 	br	1658 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1644:	01400144 	movi	r5,5
    1648:	8009883a 	mov	r4,r16
    164c:	00016980 	call	1698 <__mulsi3>
    1650:	10bfffc4 	addi	r2,r2,-1
    1654:	00bffe16 	blt	zero,r2,1650 <_gp+0xffff7f54>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    1658:	0005883a 	mov	r2,zero
    165c:	dfc00117 	ldw	ra,4(sp)
    1660:	dc000017 	ldw	r16,0(sp)
    1664:	dec00204 	addi	sp,sp,8
    1668:	f800283a 	ret

0000166c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    166c:	f800283a 	ret

00001670 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1670:	f800283a 	ret

00001674 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1674:	000170fa 	wrctl	ienable,zero
    1678:	f800283a 	ret

0000167c <strlen>:
    167c:	2005883a 	mov	r2,r4
    1680:	10c00007 	ldb	r3,0(r2)
    1684:	18000226 	beq	r3,zero,1690 <strlen+0x14>
    1688:	10800044 	addi	r2,r2,1
    168c:	003ffc06 	br	1680 <_gp+0xffff7f84>
    1690:	1105c83a 	sub	r2,r2,r4
    1694:	f800283a 	ret

00001698 <__mulsi3>:
    1698:	0005883a 	mov	r2,zero
    169c:	20000726 	beq	r4,zero,16bc <__mulsi3+0x24>
    16a0:	20c0004c 	andi	r3,r4,1
    16a4:	2008d07a 	srli	r4,r4,1
    16a8:	18000126 	beq	r3,zero,16b0 <__mulsi3+0x18>
    16ac:	1145883a 	add	r2,r2,r5
    16b0:	294b883a 	add	r5,r5,r5
    16b4:	203ffa1e 	bne	r4,zero,16a0 <_gp+0xffff7fa4>
    16b8:	f800283a 	ret
    16bc:	f800283a 	ret
